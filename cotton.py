import streamlit as st
import pandas as pd
import datetime
import os
import io
from PIL import Image
import zipfile

# Set the directory to save responses
SAVE_DIR = "responses"
os.makedirs(SAVE_DIR, exist_ok=True)

# Directory where images are saved
PHOTOS_DIR = "photos"
os.makedirs(PHOTOS_DIR, exist_ok=True)

st.set_page_config(page_title="Cotton Farming Questionnaire", layout="wide")
st.title("ЁЯМ╛ Cotton Farming Questionnaire (рдХрд┐рд╕рд╛рди рд╕рд░реНрд╡реЗ)")

# --- Language Selection ---
language = st.selectbox(
    "Select Language / рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛ / ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ",
    ["English", "Hindi", "Marathi", "Gujarati"],
)

dict_translations = {
    "English": {
        "1": "Farmer Tracenet Code",
        "2": "Farmer Full Name",
        "3": "Mobile no.",
        "4": "Gender",
        "5": "Highest education",
        "6": "Village",
        "7": "Taluka/Block",
        "8": "District",
        "9": "State",
        "10": "Pincode",
        "11": "No. of males (adult) in household",
        "12": "No. of females (adult) in household",
        "13": "Children (<16) in household",
        "14": "Total Member of Household",
        "15": "No. of school-going children",
        "16": "No. of earning members in the family",
        "17": "Total Landholding (in acres)",
        "18": "Primary crop",
        "19": "Secondary crops",
        "20": "Non-organic Cotton land (in acre) (if any)",
        "21": "Organic Cotton land (in acre)",
        "22": "Years since practicing organic cotton (#)",
        "23": "Certification status (certified/IC1..)",
        "24": "Source of irrigation",
        "25": "Cultivable area (acre)",
        "26": "No. of cattle (cow and Buffalo)",
        "27": "Source of drinking water",
        "28": "Preferred selling point (Aggregator/Suminter/APMC/other Gin)",
        "29": "Has space for harvested cotton storage (Y/N)",
        "30": "Receives any agro advisory (Y/N)",
        "31": "Received any training on best practices for organic cotton?",
        "32": "Membership in FPO/FPC/SHG",
        "33": "Maintaining any Diary or Register for record keeping (Y/N)",
        "34": "Annual household income(in Rs)",
        "35": "Primary source of income",
        "36": "Secondary source of income",
        "37": "Income from Primary source (Rs.)",
        "38": "Certification cost per annum/acre",
        "39": "Avg. production of organic cotton/acre (Kg)",
        "40": "Cost of cultivation/acre (Rs)",
        "41": "Quantity sold of organic cotton (in kg)",
        "42": "Selling price per kg (Rs.)",
        "43": "Material cost for bio-inputs",
        "44": "Name of bio-input used for pest and disease management",
        "45": "Name of bio-fertilizer/compost used",
        "46": "No. of pheromone traps used / acre",
        "47": "Cost per pheromone trap",
        "48": "No. of Yellow sticky traps used / acre",
        "49": "Cost per yellow sticky trap",
        "50": "No. of Blue sticky traps used / acre",
        "51": "Cost per blue sticky trap",
        "52": "No. of bird perches used / acre",
        "53": "Irrigation cost/acre",
        "54": "No. of irrigation required for organic cotton",
        "55": "Irrigation method used",
        "56": "Any farm machinery hired (Y/N)",
        "57": "Cost of machinery hiring (Rs.)/acre",
        "58": "Local labour cost per day",
        "59": "Migrant labour cost per day",
        "60": "No. of workers required during sowing/acre",
        "61": "No. of workers required during harvesting/acre",
        "62": "Harvesting time (1st, 2nd & 3rd picking) (month)",
        "63": "Weeding method used (manual/mechanical)",
        "64": "Weeding cost/acre",
        "65": "Cost of mulching/acre",
        "66": "No. of tillage practiced",
        "67": "Tillage cost/acre",
        "68": "Land preparation cost/acre",
        "69": "Seed rate of organic cotton/acre",
        "70": "Variety of organic cotton seed (Name)",
        "71": "Name of border crop used",
        "72": "Name of the inter crop used",
        "73": "Name of cover crop",
        "74": "Name of trap crop",
        "75": "Mulching used (Y/N)",
        "76": "Type of mulching used (Bio-plastic/green/dry)",
        "77": "What precautions used during storage",
        "78": "Hired vehicle used for transportation of seed cotton (Y/N)",
        "79": "Transportation cost (Rs.)/Kg of seed cotton",
        "80": "Any quantity rejection due to contamination/impurities (Kg)",
        "81": "Price discovery mechanism",
        "82": "Payment Transaction type (Cash/online)",
        "83": "Days of credit after sell",
        "84": "Availing any govt. scheme or subsidy benefits (Y/N)",
        "85": "Opted for crop insurance (Y/N)",
        "86": "Cost of crop insurance per acre",
        "87": "Possess KCC (Y/N)",
        "88": "Possess active bank account (Y/N)",
        "89": "Crop rotation used (Y/N)",
        "90": "Crops used for rotation",
        "91": "Using any water tracking devices (Y/N)",
        "92": "Capacity of pump (in HP)",
        "93": "Maintaining Buffer zone (Y/N)",
        "94": "Utilization of crop residue (Fuel/cattle feed/biochar/in-situ composting/burning)",
        "95": "Mode of payment to workers (cash/online)",
        "96": "Any wage difference for Men and Women workers (Y/N)",
        "97": "Using any labour register (Y/N)",
        "98": "Any arrangement of safety-kit / first-aid for workers",
        "99": "Any provision of shelter & safe drinking water for workers",
        "100": "Any provision for lavatory for workers",
        "101": "Involve family members (Women) in agricultural operations",
        "102": "Any community water harvesting structure (Y/N)",
        "103": "Use of soil moisture meter (Y/N)",
    },
    "Hindi": {
        "1": "рдХрд┐рд╕рд╛рди рдЯреНрд░реЗрд╕реЗрдиреЗрдЯ рдХреЛрдб",
        "2": "рдХрд┐рд╕рд╛рди рдХрд╛ рдкреВрд░рд╛ рдирд╛рдо",
        "3": "рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░",
        "4": "рд▓рд┐рдВрдЧ",
        "5": "рдЙрдЪреНрдЪрддрдо рд╢рд┐рдХреНрд╖рд╛",
        "6": "рдЧрд╛рдБрд╡",
        "7": "рддрд╛рд▓реБрдХрд╛/рдмреНрд▓реЙрдХ",
        "8": "рдЬрд┐рд▓рд╛",
        "9": "рд░рд╛рдЬреНрдп",
        "10": "рдкрд┐рдирдХреЛрдб",
        "11": "рдШрд░ рдореЗрдВ рдкреБрд░реБрд╖реЛрдВ (рд╡рдпрд╕реНрдХ) рдХреА рд╕рдВрдЦреНрдпрд╛",
        "12": "рдШрд░ рдореЗрдВ рдорд╣рд┐рд▓рд╛рдУрдВ (рд╡рдпрд╕реНрдХ) рдХреА рд╕рдВрдЦреНрдпрд╛",
        "13": "рдШрд░ рдореЗрдВ рдмрдЪреНрдЪреЗ (<16)",
        "14": "рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рдХреБрд▓ рд╕рджрд╕реНрдп",
        "15": "рд╕реНрдХреВрд▓ рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ рдмрдЪреНрдЪреЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛",
        "16": "рдкрд░рд┐рд╡рд╛рд░ рдореЗрдВ рдХрдорд╛рдиреЗ рд╡рд╛рд▓реЗ рд╕рджрд╕реНрдпреЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛",
        "17": "рдХреБрд▓ рднреВрдорд┐ рдЬреЛрдд (рдПрдХрдбрд╝ рдореЗрдВ)",
        "18": "рдкреНрд░рд╛рдердорд┐рдХ рдлрд╕рд▓",
        "19": "рджреНрд╡рд┐рддреАрдпрдХ рдлрд╕рд▓реЗрдВ",
        "20": "рдЧреИрд░-рдЬреИрд╡рд┐рдХ рдХрдкрд╛рд╕ рднреВрдорд┐ (рдПрдХрдбрд╝ рдореЗрдВ) (рдпрджрд┐ рдХреЛрдИ рд╣реЛ)",
        "21": "рдЬреИрд╡рд┐рдХ рдХрдкрд╛рд╕ рднреВрдорд┐ (рдПрдХрдбрд╝ рдореЗрдВ)",
        "22": "рдЬреИрд╡рд┐рдХ рдХрдкрд╛рд╕ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рд╕реЗ рд╡рд░реНрд╖ (#)",
        "23": "рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд╕реНрдерд┐рддрд┐ (рдкреНрд░рдорд╛рдгрд┐рдд/IC1..)",
        "24": "рд╕рд┐рдВрдЪрд╛рдИ рдХрд╛ рд╕реНрд░реЛрдд",
        "25": "рдХреГрд╖рд┐ рдпреЛрдЧреНрдп рдХреНрд╖реЗрддреНрд░ (рдПрдХрдбрд╝)",
        "26": "рдорд╡реЗрд╢рд┐рдпреЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛ (рдЧрд╛рдп рдФрд░ рднреИрдВрд╕)",
        "27": "рдкреАрдиреЗ рдХреЗ рдкрд╛рдиреА рдХрд╛ рд╕реНрд░реЛрдд",
        "28": "рдкрд╕рдВрджреАрджрд╛ рдмрд┐рдХреНрд░реА рдмрд┐рдВрджреБ (рдПрдЧреНрд░реАрдЧреЗрдЯрд░/рд╕реБрдорд┐рдВрдЯрд░/рдПрдкреАрдПрдорд╕реА/рдЕрдиреНрдп рдЬрд┐рди)",
        "29": "рдХрдЯреА рд╣реБрдИ рдХрдкрд╛рд╕ рднрдВрдбрд╛рд░рдг рдХреЗ рд▓рд┐рдП рдЬрдЧрд╣ рд╣реИ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "30": "рдХреЛрдИ рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣рдХрд╛рд░ рдкреНрд░рд╛рдкреНрдд рд╣реЛрддрд╛ рд╣реИ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "31": "рдХреНрдпрд╛ рдЬреИрд╡рд┐рдХ рдХрдкрд╛рд╕ рдХреЗ рд▓рд┐рдП рд╕рд░реНрд╡реЛрддреНрддрдо рдкреНрд░рдерд╛рдУрдВ рдкрд░ рдХреЛрдИ рдкреНрд░рд╢рд┐рдХреНрд╖рдг рдкреНрд░рд╛рдкреНрдд рд╣реБрдЖ рд╣реИ?",
        "32": "рдПрдлрдкреАрдУ/рдПрдлрдкреАрд╕реА/рдПрд╕рдПрдЪрдЬреА рдореЗрдВ рд╕рджрд╕реНрдпрддрд╛",
        "33": "рд░рд┐рдХреЙрд░реНрдб рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдбрд╛рдпрд░реА рдпрд╛ рд░рдЬрд┐рд╕реНрдЯрд░ рдмрдирд╛рдП рд░рдЦрдирд╛ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "34": "рд╡рд╛рд░реНрд╖рд┐рдХ рдШрд░реЗрд▓реВ рдЖрдп (рд░реБрдкрдпреЗ рдореЗрдВ)",
        "35": "рдЖрдп рдХрд╛ рдкреНрд░рд╛рдердорд┐рдХ рд╕реНрд░реЛрдд",
        "36": "рдЖрдп рдХрд╛ рджреНрд╡рд┐рддреАрдпрдХ рд╕реНрд░реЛрдд",
        "37": "рдкреНрд░рд╛рдердорд┐рдХ рд╕реНрд░реЛрдд рд╕реЗ рдЖрдп (рд░реБ.)",
        "38": "рдкреНрд░рддрд┐ рд╡рд░реНрд╖/рдПрдХрдбрд╝ рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд▓рд╛рдЧрдд",
        "39": "рдЬреИрд╡рд┐рдХ рдХрдкрд╛рд╕/рдПрдХрдбрд╝ рдХрд╛ рдФрд╕рдд рдЙрддреНрдкрд╛рджрди (рдХрд┐рд▓реЛ)",
        "40": "рдкреНрд░рддрд┐ рдПрдХрдбрд╝ рдЦреЗрддреА рдХреА рд▓рд╛рдЧрдд (рд░реБ)",
        "41": "рдЬреИрд╡рд┐рдХ рдХрдкрд╛рд╕ рдХреА рдмреЗрдЪреА рдЧрдИ рдорд╛рддреНрд░рд╛ (рдХрд┐рд▓реЛ рдореЗрдВ)",
        "42": "рдкреНрд░рддрд┐ рдХрд┐рд▓реЛ рд╡рд┐рдХреНрд░рдп рдореВрд▓реНрдп (рд░реБ.)",
        "43": "рдЬреИрд╡-рдЗрдирдкреБрдЯ рдХреЗ рд▓рд┐рдП рд╕рд╛рдордЧреНрд░реА рд▓рд╛рдЧрдд",
        "44": "рдХреАрдЯ рдФрд░ рд░реЛрдЧ рдкреНрд░рдмрдВрдзрди рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХрд┐рдП рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ рдЬреИрд╡-рдЗрдирдкреБрдЯ рдХрд╛ рдирд╛рдо",
        "45": "рдЙрдкрдпреЛрдЧ рдХрд┐рдП рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ рдЬреИрд╡-рдЙрд░реНрд╡рд░рдХ/рдЦрд╛рдж рдХрд╛ рдирд╛рдо",
        "46": "рдлреЗрд░реЛрдореЛрди рдЬрд╛рд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ / рдПрдХрдбрд╝",
        "47": "рдкреНрд░рддрд┐ рдлреЗрд░реЛрдореЛрди рдЬрд╛рд▓ рд▓рд╛рдЧрдд",
        "48": "рдкреАрд▓реЗ рдЪрд┐рдкрдЪрд┐рдкреЗ рдЬрд╛рд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ / рдПрдХрдбрд╝",
        "49": "рдкреНрд░рддрд┐ рдкреАрд▓реЗ рдЪрд┐рдкрдЪрд┐рдкреЗ рдЬрд╛рд▓ рд▓рд╛рдЧрдд",
        "50": "рдиреАрд▓реЗ рдЪрд┐рдкрдЪрд┐рдкреЗ рдЬрд╛рд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ / рдПрдХрдбрд╝",
        "51": "рдкреНрд░рддрд┐ рдиреАрд▓реЗ рдЪрд┐рдкрдЪрд┐рдкреЗ рдЬрд╛рд▓ рд▓рд╛рдЧрдд",
        "52": "рдкрдХреНрд╖реА рдкрд░реНрдЪ рдХрд╛ рдЙрдкрдпреЛрдЧ / рдПрдХрдбрд╝",
        "53": "рд╕рд┐рдВрдЪрд╛рдИ рд▓рд╛рдЧрдд/рдПрдХрд░",
        "54": "рдЬреИрд╡рд┐рдХ рдХрдкрд╛рд╕ рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ рд╕рд┐рдВрдЪрд╛рдИ рдХреА рд╕рдВрдЦреНрдпрд╛",
        "55": "рд╕рд┐рдВрдЪрд╛рдИ рд╡рд┐рдзрд┐ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЧрдпрд╛",
        "56": "рдХреНрдпрд╛ рдХреЛрдИ рдХреГрд╖рд┐ рдорд╢реАрдирд░реА рдХрд┐рд░рд╛рдП рдкрд░ рд▓реА рдЧрдИ рд╣реИ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "57": "рдорд╢реАрдирд░реА рдХрд┐рд░рд╛рдП рдкрд░ рд▓реЗрдиреЗ рдХреА рд▓рд╛рдЧрдд (рд░реБ.)/рдПрдХрдбрд╝",
        "58": "рд╕реНрдерд╛рдиреАрдп рд╢реНрд░рдо рд▓рд╛рдЧрдд рдкреНрд░рддрд┐ рджрд┐рди",
        "59": "рдкреНрд░рд╡рд╛рд╕реА рд╢реНрд░рдо рд▓рд╛рдЧрдд рдкреНрд░рддрд┐ рджрд┐рди",
        "60": "рдмреБрд╡рд╛рдИ рдХреЗ рджреМрд░рд╛рди рдЖрд╡рд╢реНрдпрдХ рд╢реНрд░рдорд┐рдХреЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛/рдПрдХрдбрд╝",
        "61": "рдХрдЯрд╛рдИ рдХреЗ рджреМрд░рд╛рди рдЖрд╡рд╢реНрдпрдХ рд╢реНрд░рдорд┐рдХреЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛/рдПрдХрдбрд╝",
        "62": "рдХрдЯрд╛рдИ рдХрд╛ рд╕рдордп (1st, 2nd рдФрд░ 3rd рдкрд┐рдХрд┐рдВрдЧ) (рдорд╣реАрдирд╛)",
        "63": "рдЦрд░рдкрддрд╡рд╛рд░ рд╡рд┐рдзрд┐ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЧрдпрд╛ (рдореИрдиреБрдЕрд▓/рдореИрдХреЗрдирд┐рдХрд▓)",
        "64": "рдЦрд░рдкрддрд╡рд╛рд░ рд▓рд╛рдЧрдд/рдПрдХрдбрд╝",
        "65": "рдкрд▓рд╡рд╛рд░ рд▓рд╛рдЧрдд/рдПрдХрд░",
        "66": "рдЬреБрддрд╛рдИ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд┐рдпрд╛ рдЧрдпрд╛",
        "67": "рдЬреБрддрд╛рдИ рд▓рд╛рдЧрдд/рдПрдХрдбрд╝",
        "68": "рднреВрдорд┐ рддреИрдпрд╛рд░реА рд▓рд╛рдЧрдд/рдПрдХрдбрд╝",
        "69": "рд╕реЗрдВрджреНрд░рд┐рдп рдХрд╛рдкрд╕рд╛рдЪрд╛ рдмрд┐рдпрд╛рдгреЗ рджрд░/рдПрдХрд░",
        "70": "рд╕реЗрдВрджреНрд░рд┐рдп рдХрдкрд╛рд╕ рдмрд┐рдпрд╛рдгреНрдпрд╛рдЪреА рдЬрд╛рдд (рдирд╛рд╡)",
        "71": "рдЙрдкрдпреЛрдЧ рдХреЗрд▓реЗрд▓реНрдпрд╛ рдмреЙрд░реНрдбрд░ рдкрд┐рдХрд╛рдЪреЗ рдирд╛рд╡",
        "72": "рдЙрдкрдпреЛрдЧ рдХреЗрд▓реЗрд▓реНрдпрд╛ рдЖрдВрддрд░рдкрд┐рдХрд╛рдЪреЗ рдирд╛рд╡",
        "73": "рдХрд╡рд░ рдкрд╛рдХрд╛рдЪреЗ рдирд╛рд╡",
        "74": "рдЯреНрд░реИрдк рдлрд╕рд▓рд╛рдЪреЗ рдирд╛рд╡",
        "75": "рдЖрдЪреНрдЫрд╛рджрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЧрдпрд╛ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "76": "рдЖрдЪреНрдЫрд╛рджрди рдХреЗ рдкреНрд░рдХрд╛рд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЧрдпрд╛ (рдЬреИрд╡-рдкреНрд▓рд╛рд╕реНрдЯрд┐рдХ/рд╣рд░рд╛/рд╕реВрдЦрд╛)",
        "77": "рднрдВрдбрд╛рд░рдг рдХреЗ рджреМрд░рд╛рди рдХреНрдпрд╛ рд╕рд╛рд╡рдзрд╛рдирд┐рдпрд╛рдВ рдмрд░рддреА рдЬрд╛рддреА рд╣реИрдВ",
        "78": "рдмреАрдЬ рдХрдкрд╛рд╕ рдХреЗ рдкрд░рд┐рд╡рд╣рди рдХреЗ рд▓рд┐рдП рдХрд┐рд░рд╛рдП рдкрд░ рд╡рд╛рд╣рди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "79": "рдкрд░рд┐рд╡рд╣рди рд▓рд╛рдЧрдд (рд░реБ.)/рдмреАрдЬ рдХрдкрд╛рд╕ рдХрд╛ рдХрд┐рд▓реЛ",
        "80": "рдкреНрд░рджреВрд╖рдг/рдЕрд╢реБрджреНрдзрд┐рдпреЛрдВ рдХреЗ рдХрд╛рд░рдг рдХреЛрдИ рдорд╛рддреНрд░рд╛ рдЕрд╕реНрд╡реАрдХреГрддрд┐ (рдХрд┐рд▓реЛ)",
        "81": "рдореВрд▓реНрдп рдЦреЛрдЬ рддрдВрддреНрд░",
        "82": "рднреБрдЧрддрд╛рди рд▓реЗрдирджреЗрди рдкреНрд░рдХрд╛рд░ (рдирдХрдж/рдСрдирд▓рд╛рдЗрди)",
        "83": "рдмреЗрдЪрдиреЗ рдХреЗ рдмрд╛рдж рдХреНрд░реЗрдбрд┐рдЯ рдХреЗ рджрд┐рди",
        "84": "рдХрд┐рд╕реА рднреА рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рдпрд╛ рд╕рдмреНрд╕рд┐рдбреА рд▓рд╛рдн рдХрд╛ рд▓рд╛рдн рдЙрдард╛рдирд╛ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "85": "рдлрд╕рд▓ рдмреАрдорд╛ рдХреЗ рд▓рд┐рдП рдЪреБрдирд╛ рдЧрдпрд╛ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "86": "рдлрд╕рд▓ рдмреАрдорд╛ рдХреА рд▓рд╛рдЧрдд рдкреНрд░рддрд┐ рдПрдХрдбрд╝",
        "87": "рдХреЗрд╕реАрд╕реА рд╣реИ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "88": "рд╕рдХреНрд░рд┐рдп рдмреИрдВрдХ рдЦрд╛рддрд╛ рд╣реИ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "89": "рдлрд╕рд▓ рд░реЛрдЯреЗрд╢рди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЧрдпрд╛ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "90": "рд░реЛрдЯреЗрд╢рди рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХреА рдЬрд╛рдиреЗ рд╡рд╛рд▓реА рдлрд╕рд▓реЗрдВ",
        "91": "рдХреНрдпрд╛ рдХрд┐рд╕реА рдЬрд▓ рдЯреНрд░реИрдХрд┐рдВрдЧ рдбрд┐рд╡рд╛рдЗрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "92": "рдкрдВрдк рдХреА рдХреНрд╖рдорддрд╛ (рдПрдЪрдкреА рдореЗрдВ)",
        "93": "рдмрдлрд░ рдЬреЛрди рдмрдирд╛рдП рд░рдЦрдирд╛ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "94": "рдлрд╕рд▓ рдЕрд╡рд╢реЗрд╖ рдХрд╛ рдЙрдкрдпреЛрдЧ (рдИрдВрдзрди/рдкрд╢реБ рдЪрд╛рд░рд╛/рдмрд╛рдпреЛрдЪрд╛рд░/рдЗрди-рд╕реАрдЯреВ рдХрдВрдкреЛрд╕реНрдЯрд┐рдВрдЧ/рдЬрд▓рд╛рдирд╛)",
        "95": "рд╢реНрд░рдорд┐рдХреЛрдВ рдХреЛ рднреБрдЧрддрд╛рди рдХрд╛ рддрд░реАрдХрд╛ (рдирдХрдж/рдСрдирд▓рд╛рдЗрди)",
        "96": "рдкреБрд░реБрд╖ рдФрд░ рдорд╣рд┐рд▓рд╛ рд╢реНрд░рдорд┐рдХреЛрдВ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╡реЗрддрди рдЕрдВрддрд░ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "97": "рдХреНрдпрд╛ рдХрд┐рд╕реА рд╢реНрд░рдо рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "98": "рд╢реНрд░рдорд┐рдХреЛрдВ рдХреЗ рд▓рд┐рдП рд╕реБрд░рдХреНрд╖рд╛-рдХрд┐рдЯ/рдкреНрд░рд╛рдердорд┐рдХ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдХреА рдХреЛрдИ рд╡реНрдпрд╡рд╕реНрдерд╛",
        "99": "рд╢реНрд░рдорд┐рдХреЛрдВ рдХреЗ рд▓рд┐рдП рдЖрд╢реНрд░рдп рдФрд░ рд╕реБрд░рдХреНрд╖рд┐рдд рдкреЗрдпрдЬрд▓ рдХрд╛ рдХреЛрдИ рдкреНрд░рд╛рд╡рдзрд╛рди",
        "100": "рд╢реНрд░рдорд┐рдХреЛрдВ рдХреЗ рд▓рд┐рдП рд╢реМрдЪрд╛рд▓рдп рдХрд╛ рдХреЛрдИ рдкреНрд░рд╛рд╡рдзрд╛рди",
        "101": "рдХреГрд╖рд┐ рдХрд╛рд░реНрдпреЛрдВ рдореЗрдВ рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд╕рджрд╕реНрдпреЛрдВ (рдорд╣рд┐рд▓рд╛рдУрдВ) рдХреЛ рд╢рд╛рдорд┐рд▓ рдХрд░рдирд╛",
        "102": "рдХреЛрдИ рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рдЬрд▓ рд╕рдВрдЪрдпрди рд╕рдВрд░рдЪрдирд╛ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
        "103": "рдореГрджрд╛ рдирдореА рдореАрдЯрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ (рд╣рд╛рдБ/рдирд╣реАрдВ)",
    },
    "Marathi": {
        "1": "рд╢реЗрддрдХрд░реА рдЯреНрд░реЗрд╕рдиреЗрдЯ рдХреЛрдб",
        "2": "рд╢реЗрддрдХрд▒реНрдпрд╛рдЪреЗ рдкреВрд░реНрдг рдирд╛рд╡",
        "3": "рдореЛрдмрд╛рдИрд▓ рдирдВрдмрд░",
        "4": "рд▓рд┐рдВрдЧ",
        "5": "рдЙрдЪреНрдЪрддрдо рд╢рд┐рдХреНрд╖рдг",
        "6": "рдЧрд╛рд╡",
        "7": "рддрд╛рд▓реБрдХрд╛/рдмреНрд▓реЙрдХ",
        "8": "рдЬрд┐рд▓реНрд╣рд╛",
        "9": "рд░рд╛рдЬреНрдп",
        "10": "рдкрд┐рдирдХреЛрдб",
        "11": "рдШрд░рд╛рддреАрд▓ рдкреБрд░реБрд╖рд╛рдВрдЪреА (рдкреНрд░реМрдв) рд╕рдВрдЦреНрдпрд╛",
        "12": "рдШрд░рд╛рддреАрд▓ рдорд╣рд┐рд▓рд╛рдВрдЪреА (рдкреНрд░реМрдв) рд╕рдВрдЦреНрдпрд╛",
        "13": "рдШрд░рд╛рддреАрд▓ рдореБрд▓реЗ (<16)",
        "14": "рдШрд░рд╛рддреАрд▓ рдПрдХреВрдг рд╕рджрд╕реНрдп",
        "15": "рд╢рд╛рд│реЗрдд рдЬрд╛рдгрд╛рд▒реНрдпрд╛ рдореБрд▓рд╛рдВрдЪреА рд╕рдВрдЦреНрдпрд╛",
        "16": "рдХреБрдЯреБрдВрдмрд╛рддреАрд▓ рдХрдорд╛рд╡рддреНрдпрд╛ рд╕рджрд╕реНрдпрд╛рдВрдЪреА рд╕рдВрдЦреНрдпрд╛",
        "17": "рдПрдХреВрдг рдЬрдорд┐рдиреАрдЪреА рдорд╛рд▓рдХреА (рдПрдХрд░рдордзреНрдпреЗ)",
        "18": "рдкреНрд░рд╛рдердорд┐рдХ рдкреАрдХ",
        "19": "рджреБрдпреНрдпрдо рдкрд┐рдХреЗ",
        "20": "рдЧреИрд░-рд╕реЗрдВрджреНрд░рд┐рдп рдХрд╛рдкреВрд╕ рдЬрдореАрди (рдПрдХрд░рдордзреНрдпреЗ) (рдЕрд╕рд▓реНрдпрд╛рд╕)",
        "21": "рд╕реЗрдВрджреНрд░рд┐рдп рдХрд╛рдкреВрд╕ рдЬрдореАрди (рдПрдХрд░рдордзреНрдпреЗ)",
        "22": "рд╕реЗрдВрджреНрд░рд┐рдп рдХрд╛рдкреВрд╕ рд▓рд╛рдЧрд╡рдбреАрдкрд╛рд╕реВрдирдЪреА рд╡рд░реНрд╖реЗ (#)",
        "23": "рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд╕реНрдерд┐рддреА (рдкреНрд░рдорд╛рдгрд┐рдд/IC1..)",
        "24": "рд╕рд┐рдВрдЪрдирд╛рдЪрд╛ рд╕реНрд░реЛрдд",
        "25": "рдХреГрд╖рд┐ рдпреЛрдЧреНрдп рдХреНрд╖реЗрддреНрд░ (рдПрдХрд░)",
        "26": "рдЬрдирд╛рд╡рд░рд╛рдВрдЪреА рд╕рдВрдЦреНрдпрд╛ (рдЧрд╛рдп рдЖрдгрд┐ рдореНрд╣реИрд╕)",
        "27": "рдкрд┐рдгреНрдпрд╛рдЪреНрдпрд╛ рдкрд╛рдгреНрдпрд╛рдЪреЗ рд╕реНрд░реЛрдд",
        "28": "рдкрд╕рдВрддреАрдЪреЗ рд╡рд┐рдХреНрд░реА рдХреЗрдВрджреНрд░ (рдПрдЧреНрд░реАрдЧреЗрдЯрд░/рд╕реБрдорд┐рдВрдЯрд░/рдПрдкреАрдПрдорд╕реА/рдЗрддрд░ рдЬрд┐рди)",
        "29": "рдХрд╛рдкрдгреА рдХреЗрд▓реЗрд▓реНрдпрд╛ рдХрд╛рдкрд╕рд╛рдЪреНрдпрд╛ рд╕рд╛рдард╡рдгреБрдХреАрд╕рд╛рдареА рдЬрд╛рдЧрд╛ рдЖрд╣реЗ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "30": "рдХреЛрдгрддрд╛рд╣реА рдХреГрд╖реА рд╕рд▓реНрд▓рд╛ рдорд┐рд│рддреЛ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "31": "рд╕реЗрдВрджреНрд░рд┐рдп рдХрд╛рдкрд╕рд╛рд╕рд╛рдареА рд╕рд░реНрд╡реЛрддреНрддрдо рдкрджреНрдзрддреАрдВрд╡рд░ рдХреЛрдгрддреЗрд╣реА рдкреНрд░рд╢рд┐рдХреНрд╖рдг рдорд┐рд│рд╛рд▓реЗ рдЖрд╣реЗ рдХрд╛?",
        "32": "рдПрдлрдкреАрдУ/рдПрдлрдкреАрд╕реА/рдПрд╕рдПрдЪрдЬреА рдордзреНрдпреЗ рд╕рджрд╕реНрдпрддрд╛",
        "33": "рдиреЛрдВрдж рдареЗрд╡рдгреНрдпрд╛рд╕рд╛рдареА рдХреЛрдгрддреАрд╣реА рдбрд╛рдпрд░реА рдХрд┐рдВрд╡рд╛ рд░рдЬрд┐рд╕реНрдЯрд░ рдареЗрд╡рдгреЗ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "34": "рд╡рд╛рд░реНрд╖рд┐рдХ рдШрд░рдЧреБрддреА рдЙрддреНрдкрдиреНрди (рд░реБрдкрдпрд╛рдВрдордзреНрдпреЗ)",
        "35": "рдЙрддреНрдкрдиреНрдирд╛рдЪрд╛ рдкреНрд░рд╛рдердорд┐рдХ рд╕реНрд░реЛрдд",
        "36": "рдЙрддреНрдкрдиреНрдирд╛рдЪрд╛ рджреБрдпреНрдпрдо рд╕реНрд░реЛрдд",
        "37": "рдкреНрд░рд╛рдердорд┐рдХ рд╕реНрд░реЛрддрд╛рдХрдбреВрди рдЙрддреНрдкрдиреНрди (рд░реБ.)",
        "38": "рдкреНрд░рддрд┐ рд╡рд░реНрд╖/рдПрдХрд░ рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдЦрд░реНрдЪ",
        "39": "рд╕реЗрдВрджреНрд░рд┐рдп рдХрд╛рдкреВрд╕/рдПрдХрд░рдЪреЗ рд╕рд░рд╛рд╕рд░реА рдЙрддреНрдкрд╛рджрди (рдХрд┐рд▓реЛ)",
        "40": "рдкреНрд░рддрд┐ рдПрдХрд░ рд▓рд╛рдЧрд╡рдбреАрдЪрд╛ рдЦрд░реНрдЪ (рд░реБ.)",
        "41": "рд╕реЗрдВрджреНрд░рд┐рдп рдХрд╛рдкрд╕рд╛рдЪреА рд╡рд┐рдХреНрд░реА рдХреЗрд▓реЗрд▓реА рдорд╛рддреНрд░рд╛ (рдХрд┐рд▓реЛрдордзреНрдпреЗ)",
        "42": "рдкреНрд░рддрд┐ рдХрд┐рд▓реЛ рд╡рд┐рдХреНрд░реА рдХрд┐рдВрдордд (рд░реБ.)",
        "43": "рдЬреИрд╡-рдЗрдирдкреБрдЯрд╕рд╛рдареА рд╕рд╛рдордЧреНрд░реА рдЦрд░реНрдЪ",
        "44": "рдХреАрдб рдЖрдгрд┐ рд░реЛрдЧ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдирд╛рд╕рд╛рдареА рд╡рд╛рдкрд░рд▓реНрдпрд╛ рдЬрд╛рдгрд╛рд▒реНрдпрд╛ рдЬреИрд╡-рдЗрдирдкреБрдЯрдЪреЗ рдирд╛рд╡",
        "45": "рд╡рд╛рдкрд░рд▓реНрдпрд╛ рдЬрд╛рдгрд╛рд▒реНрдпрд╛ рдЬреИрд╡-рдЦрдд/рдЦрд╛рджрдЪреЗ рдирд╛рд╡",
        "46": "рдлреЗрд░реЛрдореЛрди рд╕рд╛рдкрд│реЗ рд╡рд╛рдкрд░рд▓реЗ / рдПрдХрд░",
        "47": "рдкреНрд░рддрд┐ рдлреЗрд░реЛрдореЛрди рд╕рд╛рдкрд│рд╛ рдЦрд░реНрдЪ",
        "48": "рдкрд┐рд╡рд│реЗ рдЪрд┐рдХрдЯ рд╕рд╛рдкрд│реЗ рд╡рд╛рдкрд░рд▓реЗ / рдПрдХрд░",
        "49": "рдкреНрд░рддрд┐ рдкрд┐рд╡рд│рд╛ рдЪрд┐рдХрдЯ рд╕рд╛рдкрд│рд╛ рдЦрд░реНрдЪ",
        "50": "рдирд┐рд│реЗ рдЪрд┐рдХрдЯ рд╕рд╛рдкрд│реЗ рд╡рд╛рдкрд░рд▓реЗ / рдПрдХрд░",
        "51": "рдкреНрд░рддрд┐ рдирд┐рд│рд╛ рдЪрд┐рдХрдЯ рд╕рд╛рдкрд│рд╛ рдЦрд░реНрдЪ",
        "52": "рдкрдХреНрд╖реА рдерд╛рдВрдмреЗ рд╡рд╛рдкрд░рд▓реЗ / рдПрдХрд░",
        "53": "рд╕рд┐рдВрдЪрди рдЦрд░реНрдЪ/рдПрдХрд░",
        "54": "рд╕реЗрдВрджреНрд░рд┐рдп рдХрд╛рдкрд╕рд╛рд╕рд╛рдареА рдЖрд╡рд╢реНрдпрдХ рд╕рд┐рдВрдЪрдирд╛рдЪреА рд╕рдВрдЦреНрдпрд╛",
        "55": "рд╡рд╛рдкрд░рд▓реЗрд▓реА рд╕рд┐рдВрдЪрди рдкрджреНрдзрдд",
        "56": "рдХреЛрдгрддреАрд╣реА рд╢реЗрддреА рдЕрд╡рдЬрд╛рд░реЗ рднрд╛рдбреНрдпрд╛рдиреЗ рдШреЗрддрд▓реА рдЖрд╣реЗрдд (рд╣реЛрдп/рдирд╛рд╣реА)",
        "57": "рдЕрд╡рдЬрд╛рд░реЗ рднрд╛рдбреНрдпрд╛рдиреЗ рдШреЗрдгреНрдпрд╛рдЪрд╛ рдЦрд░реНрдЪ (рд░реБ.)/рдПрдХрд░",
        "58": "рд╕реНрдерд╛рдирд┐рдХ рдордЬреБрд░реАрдЪрд╛ рджрд░ рдкреНрд░рддрд┐ рджрд┐рд╡рд╕",
        "59": "рд╕реНрдерд▓рд╛рдВрддрд░рд┐рдд рдордЬреБрд░реАрдЪрд╛ рджрд░ рдкреНрд░рддрд┐ рджрд┐рд╡рд╕",
        "60": "рд╡рд╛рд╡рдгреАрдЪреНрдпрд╛ рд╡реЗрд│реА рдЖрд╡рд╢реНрдпрдХ рдХрд╛рдордЧрд╛рд░рд╛рдВрдЪреА рд╕рдВрдЦреНрдпрд╛/рдПрдХрд░",
        "61": "рдХрд╛рдкрдгреАрдЪреНрдпрд╛ рд╡реЗрд│реА рдЖрд╡рд╢реНрдпрдХ рдХрд╛рдордЧрд╛рд░рд╛рдВрдЪреА рд╕рдВрдЦреНрдпрд╛/рдПрдХрд░",
        "62": "рдХрд╛рдкрдгреАрдЪреА рд╡реЗрд│ (1 рд▓реА, 2 рд░реА рдЖрдгрд┐ 3 рд░реА рдирд┐рд╡рдб) (рдорд╣рд┐рдирд╛)",
        "63": "рддрдг рдХрд╛рдврдгреНрдпрд╛рдЪреА рдкрджреНрдзрдд рд╡рд╛рдкрд░рд▓реА (рд╣рд╛рддрд╛рдиреЗ/рдпрд╛рдВрддреНрд░рд┐рдХ)",
        "64": "рддрдг рдХрд╛рдврдгреНрдпрд╛рдЪрд╛ рдЦрд░реНрдЪ/рдПрдХрд░",
        "65": "рдЖрдЪреНрдЫрд╛рджрди рдЦрд░реНрдЪ/рдПрдХрд░",
        "66": "рдХрд┐рддреА рд╡реЗрд│рд╛ рдирд╛рдВрдЧрд░рдгреА рдХреЗрд▓реА",
        "67": "рдирд╛рдВрдЧрд░рдгреА рдЦрд░реНрдЪ/рдПрдХрд░",
        "68": "рдЬрдореАрди рддрдпрд╛рд░ рдХрд░рдгреНрдпрд╛рдЪрд╛ рдЦрд░реНрдЪ/рдПрдХрд░",
        "69": "рд╕реЗрдВрджреНрд░рд┐рдп рдмрд┐рдпрд╛рдгреНрдпрд╛рдЪрд╛ рджрд░/рдПрдХрд░",  # Corrected translation
        "70": "рд╕реЗрдВрджреНрд░рд┐рдп рдХрд╛рдкрд╕рд╛рдЪреНрдпрд╛ рдмрд┐рдпрд╛рдгреНрдпрд╛рдЪреА рдЬрд╛рдд (рдирд╛рд╡)",  # Corrected translation
        "71": "рд╡рд╛рдкрд░рд▓реЗрд▓реНрдпрд╛ рдмреЙрд░реНрдбрд░ рдкрд┐рдХрд╛рдЪреЗ рдирд╛рд╡",  # Corrected translation
        "72": "рд╡рд╛рдкрд░рд▓реЗрд▓реНрдпрд╛ рдЖрдВрддрд░рдкрд┐рдХрд╛рдЪреЗ рдирд╛рд╡",  # Corrected translation
        "73": "рдХрд╡рд░ рдкрд┐рдХрд╛рдЪреЗ рдирд╛рд╡",  # Corrected translation
        "74": "рдЯреНрд░реЕрдк рдкрд┐рдХрд╛рдЪреЗ рдирд╛рд╡",  # Corrected translation
        "75": "рдорд▓реНрдЪрд┐рдВрдЧ рд╡рд╛рдкрд░рд▓реЗ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "76": "рд╡рд╛рдкрд░рд▓реЗрд▓реНрдпрд╛ рдорд▓реНрдЪрд┐рдВрдЧрдЪрд╛ рдкреНрд░рдХрд╛рд░ (рдЬреИрд╡-рдкреНрд▓рд╛рд╕реНрдЯрд┐рдХ/рд╣рд┐рд░рд╡рд╛/рдХреЛрд░рдбрд╛)",  # Corrected translation
        "77": "рд╕рд╛рдард╡рдгреБрдХреАрджрд░рдореНрдпрд╛рди рдХреЛрдгрддреА рдЦрдмрд░рджрд╛рд░реА рдШреЗрддрд▓реА рдЬрд╛рддреЗ",
        "78": "рдмреАрдЬ рдХрдкрд╛рд╕рд╛рдЪреНрдпрд╛ рд╡рд╛рд╣рддреБрдХреАрд╕рд╛рдареА рднрд╛рдбреНрдпрд╛рдЪреЗ рд╡рд╛рд╣рди рд╡рд╛рдкрд░рд▓реЗ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "79": "рд╡рд╛рд╣рддреВрдХ рдЦрд░реНрдЪ (рд░реБ.)/рдмреАрдЬ рдХрдкрд╛рд╕рд╛рдЪреЗ рдХрд┐рд▓реЛ",
        "80": "рдкреНрд░рджреВрд╖рдг/рдЕрд╢реБрджреНрдзрддреЗрдореБрд│реЗ рдХреЛрдгрддреАрд╣реА рдорд╛рддреНрд░рд╛ рдирд╛рдХрд╛рд░рд▓реА (рдХрд┐рд▓реЛ)",
        "81": "рдХрд┐рдВрдордд рд╢реЛрдзрдгреНрдпрд╛рдЪреА рдпрдВрддреНрд░рдгрд╛",
        "82": "рдЪреБрдХрд╡рдгреА рд╡реНрдпрд╡рд╣рд╛рд░ рдкреНрд░рдХрд╛рд░ (рд░реЛрдЦ/рдСрдирд▓рд╛рдЗрди)",
        "83": "рд╡рд┐рдХреНрд░реА рдХреЗрд▓реНрдпрд╛рдирдВрддрд░ рдХреНрд░реЗрдбрд┐рдЯрдЪреЗ рджрд┐рд╡рд╕",
        "84": "рдХреЛрдгрддреНрдпрд╛рд╣реА рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рдХрд┐рдВрд╡рд╛ рдЕрдиреБрджрд╛рдирд╛рдЪрд╛ рд▓рд╛рдн рдШреЗрдгреЗ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "85": "рдкреАрдХ рд╡рд┐рдорд╛ рдШреЗрддрд▓рд╛ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "86": "рдкреНрд░рддрд┐ рдПрдХрд░ рдкреАрдХ рд╡рд┐рдорд╛ рдЦрд░реНрдЪ",
        "87": "рдХреЗрд╕реАрд╕реА рдЖрд╣реЗ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "88": "рд╕рдХреНрд░рд┐рдп рдмрдБрдХ рдЦрд╛рддреЗ рдЖрд╣реЗ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "89": "рдкреАрдХ рдкрд░рд┐рднреНрд░рдордг рд╡рд╛рдкрд░рд▓реЗ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "90": "рдкрд░рд┐рднреНрд░рдордгрд╛рд╕рд╛рдареА рд╡рд╛рдкрд░рд▓реЗрд▓реА рдкрд┐рдХреЗ",
        "91": "рдХреЛрдгрддреЗрд╣реА рдЬрд▓ рдЯреНрд░реЕрдХрд┐рдВрдЧ рдЙрдкрдХрд░рдг рд╡рд╛рдкрд░рдд рдЖрд╣рд╛рдд (рд╣реЛрдп/рдирд╛рд╣реА)",
        "92": "рдкрдВрдкрд╛рдЪреА рдХреНрд╖рдорддрд╛ (рдПрдЪрдкреА рдордзреНрдпреЗ)",
        "93": "рдмрдлрд░ рдЭреЛрди рд░рд╛рдЦрдгреЗ (рд╣реЛрдп/рдирд╛рд╣реА)",  # Corrected translation
        "94": "рдкреАрдХ рдЕрд╡рд╢реЗрд╖рд╛рдВрдЪрд╛ рд╡рд╛рдкрд░ (рдЗрдВрдзрди/рдЬрдирд╛рд╡рд░рд╛рдВрдЪреЗ рдЦрд╛рджреНрдп/рдмрд╛рдпреЛрдЪрд╛рд░/рдЗрди-рд╕реАрдЯреВ рдХрдВрдкреЛрд╕реНрдЯрд┐рдВрдЧ/рдЬрд╛рд│рдгреЗ)",
        "95": "рдХрд╛рдордЧрд╛рд░рд╛рдВрдирд╛ рджреЗрдпрдХрд╛рдЪреА рдкрджреНрдзрдд (рд░реЛрдЦ/рдСрдирд▓рд╛рдЗрди)",
        "96": "рдкреБрд░реБрд╖ рдЖрдгрд┐ рдорд╣рд┐рд▓рд╛ рдХрд╛рдордЧрд╛рд░рд╛рдВрд╕рд╛рдареА рдХреЛрдгрддрд╛рд╣реА рд╡реЗрддрди рддрдлрд╛рд╡рдд (рд╣реЛрдп/рдирд╛рд╣реА)",
        "97": "рдХреЛрдгрддреЗрд╣реА рдХрд╛рдордЧрд╛рд░ рд░рдЬрд┐рд╕реНрдЯрд░ рд╡рд╛рдкрд░рдд рдЖрд╣рд╛рдд (рд╣реЛрдп/рдирд╛рд╣реА)",
        "98": "рдХрд╛рдордЧрд╛рд░рд╛рдВрд╕рд╛рдареА рд╕реБрд░рдХреНрд╖рд╛-рдХрд┐рдЯ/рдкреНрд░рд╛рдердорд┐рдХ рдЙрдкрдЪрд╛рд░рд╛рдВрдЪреА рдХреЛрдгрддреАрд╣реА рд╡реНрдпрд╡рд╕реНрдерд╛",
        "99": "рдХрд╛рдордЧрд╛рд░рд╛рдВрд╕рд╛рдареА рдирд┐рд╡рд╛рд░рд╛ рдЖрдгрд┐ рд╕реБрд░рдХреНрд╖рд┐рдд рдкрд┐рдгреНрдпрд╛рдЪреНрдпрд╛ рдкрд╛рдгреНрдпрд╛рдЪреА рдХреЛрдгрддреАрд╣реА рддрд░рддреВрдж",
        "100": "рдХрд╛рдордЧрд╛рд░рд╛рдВрд╕рд╛рдареА рд╢реМрдЪрд╛рд▓рдпрд╛рдЪреА рдХреЛрдгрддреАрд╣реА рддрд░рддреВрдж",
        "101": "рдХреГрд╖реА рдХрд╛рд░реНрдпрд╛рдВрдордзреНрдпреЗ рдХреБрдЯреБрдВрдмрд╛рддреАрд▓ рд╕рджрд╕реНрдпрд╛рдВрдирд╛ (рдорд╣рд┐рд▓рд╛рдВрдирд╛) рд╕рд╛рдореАрд▓ рдХрд░рдгреЗ",
        "102": "рдХреЛрдгрддреАрд╣реА рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рдЬрд▓ рд╕рдВрдЪрдпрди рд░рдЪрдирд╛ (рд╣реЛрдп/рдирд╛рд╣реА)",
        "103": "рдорд╛рддреАрддреАрд▓ рдУрд▓рд╛рд╡рд╛ рдореАрдЯрд░рдЪрд╛ рд╡рд╛рдкрд░ (рд╣реЛрдп/рдирд╛рд╣реА)",  # Corrected translation
    },
    "Gujarati": {
        "1": "ркЦрлЗркбрлВркд ркЯрлНрк░рлЗрк╕ркирлЗркЯ ркХрлЛркб",
        "2": "ркЦрлЗркбрлВркдркирлБркВ рккрлВрк░рлБркВ ркирк╛рко",
        "3": "ркорлЛркмрк╛ркЗрк▓ ркиркВркмрк░",
        "4": "рк▓рк┐ркВркЧ",
        "5": "ркХрлЗркЯрк▓рлЛ ркЕркнрлНркпрк╛рк╕ ркХрк░рлЗрк▓рлЛ ркЫрлЗ",
        "6": "ркЧрк╛рко",
        "7": "ркдрк╛рк▓рлБркХрлЛ/ркмрлНрк▓рлЛркХ",
        "8": "ркЬрк┐рк▓рлНрк▓рлЛ",
        "9": "рк░рк╛ркЬрлНркп",
        "10": "рккрк┐ркиркХрлЛркб",
        "11": "ркШрк░ркорк╛ркВ рккрлБрк░рлБрк╖рлЛркирлА (рккрлБркЦрлНркд) рк╕ркВркЦрлНркпрк╛",
        "12": "ркШрк░ркорк╛ркВ ркорк╣рк┐рк▓рк╛ркУркирлА (рккрлБркЦрлНркд) рк╕ркВркЦрлНркпрк╛",
        "13": "ркШрк░ркорк╛ ркмрк╛рк│ркХрлЛркирлА рк╕ркВркЦрлНркпрк╛ (рлзрлм ркерлА ркУркЫрлА ркЙркорк░ркирк╛ )",
        "14": "рккрк░рк┐рк╡рк╛рк░ркирк╛ ркХрлБрк▓ рк╕ркнрлНркпрлЛ",
        "15": "рк╢рк╛рк│рк╛ркП ркЬркдрк╛ ркмрк╛рк│ркХрлЛркирлА рк╕ркВркЦрлНркпрк╛",
        "16": "рккрк░рк┐рк╡рк╛рк░ркорк╛ркВ ркХркорк╛ркдрк╛ рк╕ркнрлНркпркирлА рк╕ркВркЦрлНркпрк╛",
        "17": "ркХрлБрк▓ ркЬркорлАрки ркзрк╛рк░ркг (ркПркХрк░ркорк╛ркВ)",
        "18": "ркорлБркЦрлНркп рккрк╛ркХ",
        "19": "ркЧрлМркг рккрк╛ркХ",
        "20": "ркмрк┐рки-ркУрк░рлНркЧрлЗркирк┐ркХ ркХрккрк╛рк╕ркирлА ркЬркорлАрки (ркПркХрк░ркорк╛ркВ)",
        "21": "ркУрк░рлНркЧрлЗркирк┐ркХ ркХрккрк╛рк╕ркирлА ркЬркорлАрки (ркПркХрк░ркорк╛ркВ)",
        "22": "ркУрк░рлНркЧркирлАркХ ркХрккрк╛рк╕ркирлА ркЦрлЗркдрлА ркХрлЗркЯрк▓рк╛ рк╡рк░рлНрк╖ркерлА ркХрк░рлЛ ркЫрлЛ",
        "23": "рк╕рк░рлНркЯрк┐рклрк┐ркХрлЗрк╕рки рк╕рлНркЯрлЗркЯрк╕ (рк╕рк░рлНркЯрк┐рклрк╛ркЗркб/IC-1,2,3)",
        "24": "рк╕рк┐ркВркЪрк╛ркИркирлЛ рк╕рлНркдрлНрк░рлЛркд",
        "25": "ркЦрлЗркдрлАрк▓рк╛ркпркХ рк╡рк┐рк╕рлНркдрк╛рк░ (ркПркХрк░)",
        "26": "ркврлЛрк░ркирлА рк╕ркВркЦрлНркпрк╛ (ркЧрк╛ркп ркЕркирлЗ ркнрлЗркВрк╕)",
        "27": "рккрлАрк╡рк╛ркирк╛ рккрк╛ркгрлАркирлЛ рк╕рлНркдрлНрк░рлЛркд",
        "28": "рккрк╕ркВркжркЧрлАркирлБркВ рк╡рлЗркЪрк╛ркг рк╕рлНркерк│ (ркПркЧрлНрк░рлАркЧрлЗркЯрк░/рк╕рлБркорк┐ркирлНркЯрк░/ркПрккрлАркПркорк╕рлА/ркЕркирлНркп ркЬрлАрки)",
        "29": "рк╡рлАркгрлА ркХрк░рлЗрк▓рк╛ ркХрккрк╛рк╕ркирк╛ рк╕ркВркЧрлНрк░рк╣ ркорк╛ркЯрлЗ ркЬркЧрлАркпрк╛ ркЫрлЗ",
        "30": "ркХрлЛркИ рккркг ркЦрлЗркдрлА рк╕ркВркмркзрк┐ркд рк╕рк▓рк╛рк╣ ркорк│рлЗ ркЫрлЗ",
        "31": "рк╢рлБркВ ркУрк░рлНркЧрлЗркирк┐ркХ ркХрккрк╛рк╕ ркорк╛ркЯрлЗркирлА рк╢рлНрк░рлЗрк╖рлНрка рккркжрлНркзркдрк┐ рккрк░ ркХрлЛркИ ркдрк╛рк▓рлАрко ркорк│рлА ркЫрлЗ",
        "32": "ркПрклрккрлАркУ/ркПрклрккрлАрк╕рлА/ркПрк╕ркПркЪркЬрлАркорк╛ркВ рк╕ркнрлНркпрккркж ркзрк░рк╛рк╡рлЛ ркЫрлЛ",
        "33": "рк░рлЗркХрлЛрк░рлНркб рк░рк╛ркЦрк╡рк╛ ркорк╛ркЯрлЗ ркХрлЛркИ ркбрк╛ркпрк░рлА ркЕркерк╡рк╛ рк░ркЬрк┐рк╕рлНркЯрк░ ркЬрк╛рк│рк╡рлЛ ркЫрлЛ",
        "34": "рк╡рк╛рк░рлНрк╖рк┐ркХ ркШрк░ркЧркерлНркерлБ ркЖрк╡ркХ (рк░рлВрккрк┐ркпрк╛ркорк╛ркВ)",
        "35": "ркЖрк╡ркХркирлЛ рккрлНрк░рк╛ркеркорк┐ркХ рк╕рлНркдрлНрк░рлЛркд",
        "36": "ркЖрк╡ркХркирлЛ ркЧрлМркг рк╕рлНркдрлНрк░рлЛркд",
        "37": "рккрлНрк░рк╛ркеркорк┐ркХ рк╕рлНркдрлНрк░рлЛркдркорк╛ркВркерлА ркЖрк╡ркХ (рк░рлВ.)",
        "38": "рк╕рк░рлНркЯрк┐рклрк┐ркХрлЗрк╕рки ркЦрк░рлНркЪ рккрлНрк░ркдрк┐ рк╡рк░рлНрк╖/ркПркХрк░",
        "39": "ркУрк░рлНркЧркирлАркХ ркХрккрк╛рк╕ркирлБркВ рк╕рк░рлЗрк░рк╛рк╢ ркЙркдрлНрккрк╛ркжрки (ркХрк┐рк▓рлЛ/ркПркХрк░)",
        "40": "ркЦрлЗркдрлАркирлЛ ркЦрк░рлНркЪ (рк░рлВрккрлАркпрк╛/ркПркХрк░)",
        "41": "ркУрк░рлНркЧрлЗркирк┐ркХ ркХрккрк╛рк╕ркирлЛ рк╡рлЗркЪрк╛ркг ркХрк░рлЗрк▓рлЛ ркЬркерлНркерлЛ (ркХрк┐рк▓рлЛркорк╛ркВ)",
        "42": "рк╡рлЗркЪрк╛ркг ркХрк┐ркВркоркд рккрлНрк░ркдрк┐ ркХрк┐рк▓рлЛ (рк░рлВ.)",
        "43": "ркмрк╛ркпрлЛ-ркЗркирккрлБркЯрлНрк╕ ркорк╛ркЯрлЗ рк╕рк╛ркоркЧрлНрк░рлА ркЦрк░рлНркЪ",
        "44": "ркЬркВркдрлБ ркЕркирлЗ рк░рлЛркЧ рк╡рлНркпрк╡рк╕рлНркерк╛рккрки ркорк╛ркЯрлЗ рк╡рккрк░рк╛ркдрк╛ ркмрк╛ркпрлЛ-ркЗркирккрлБркЯркирлБркВ ркирк╛рко",
        "45": "рк╡рккрк░рк╛ркдрк╛ ркмрк╛ркпрлЛ-ркЦркд/ркЦрк╛ркжркирлБркВ ркирк╛рко",
        "46": "рклрлЗрк░рлЛркорлЛрки ркЯрлНрк░рлЗрккркирлЛ ркЙрккркпрлЛркЧ / ркПркХрк░",
        "47": "ркЦрк░рлНркЪ рккрлНрк░ркдрк┐ рклрлЗрк░рлЛркорлЛрки ркЯрлНрк░рлЗркк",
        "48": "рккрлАрк│рк╛ рк╕рлНркЯрлАркХрлА ркЯрлНрк░рлЗрккркирлЛ ркЙрккркпрлЛркЧ / ркПркХрк░",
        "49": "ркЦрк░рлНркЪ рккрлНрк░ркдрк┐ рккрлАрк│рлЛ рк╕рлНркЯрлАркХрлА ркЯрлНрк░рлЗркк",
        "50": "рк╡рк╛ркжрк│рлА рк╕рлНркЯрлАркХрлА ркЯрлНрк░рлЗрккркирлЛ ркЙрккркпрлЛркЧ / ркПркХрк░",  # Corrected translation
        "51": "ркЦрк░рлНркЪ рккрлНрк░ркдрк┐ рк╡рк╛ркжрк│рлА рк╕рлНркЯрлАркХрлА ркЯрлНрк░рлЗркк",
        "52": "рккркХрлНрк╖рлА рк╕рлНркЯрлЗркирлНркбркирлЛ ркЙрккркпрлЛркЧ рккрлНрк░ркдрк┐ ркПркХрк░",
        "53": "рк╕рк┐ркВркЪрк╛ркИ ркЦрк░рлНркЪ/ркПркХрк░",
        "54": "ркУрк░рлНркЧрлЗркирк┐ркХ ркХрккрк╛рк╕ ркорк╛ркЯрлЗ ркЬрк░рлВрк░рлА рк╕рк┐ркВркЪрк╛ркИркирлА рк╕ркВркЦрлНркпрк╛",  # Corrected translation
        "55": "рк╡рккрк░рк╛ркпрлЗрк▓рлА рк╕рк┐ркВркЪрк╛ркИ рккркжрлНркзркдрк┐",  # Corrected translation
        "56": "ркХрлЛркИрккркг ркЦрлЗркдрлА ркорк╢рлАркирк░рлА ркнрк╛ркбрлЗ рк▓рлАркзрлА ркЫрлЗ (рк╣рк╛/ркирк╛)",
        "57": "ркорк╢рлАркирк░рлА ркнрк╛ркбрлЗ рк▓рлЗрк╡рк╛ркирлЛ ркЦрк░рлНркЪ (рк░рлВ.)/ркПркХрк░",  # Corrected translation
        "58": "рк╕рлНркерк╛ркирк┐ркХ ркоркЬрлВрк░рлА ркЦрк░рлНркЪ рккрлНрк░ркдрк┐ ркжрк┐рк╡рк╕",
        "59": "рк╕рлНркерк│рк╛ркВркдрк░рк┐ркд ркоркЬрлВрк░рлА ркЦрк░рлНркЪ рккрлНрк░ркдрк┐ ркжрк┐рк╡рк╕",
        "60": "рк╡рк╛рк╡ркгрлАркирк╛ рк╕ркоркпрлЗ ркЬрк░рлВрк░рлА ркХрк╛ркоркжрк╛рк░рлЛркирлА рк╕ркВркЦрлНркпрк╛/ркПркХрк░",
        "61": "рк╡рлАркгрлАркирк╛ рк╕ркоркпрлЗ ркЬрк░рлВрк░рлА ркХрк╛ркоркжрк╛рк░рлЛркирлА рк╕ркВркЦрлНркпрк╛/ркПркХрк░",  # Corrected translation
        "62": "рк╡рлАркгрлА рк╕ркоркп (1 рк▓рлА, 2 ркЬрлА ркЕркирлЗ 3 ркЬрлА рк╡рлАркгрлАркирлЛ ркорк╣рк┐ркирлЛ)",
        "63": "ркирк┐ркВркжрк╛ркоркг рккркжрлНркзркдрк┐ркирлЛ рккрлНрк░ркХрк╛рк░ (рк╣рк╛рке рк╡ркбрлЗ /рк╕рк╛ркзрки ркжрлНрк╡рк╛рк░рк╛)",
        "64": "ркирк┐ркВркжрк╛ркоркг ркЦрк░рлНркЪ/ркПркХрк░",
        "65": "ркорк▓рлНркЪрк┐ркВркЧ ркЦрк░рлНркЪ/ркПркХрк░",  # Corrected translation
        "66": "ркХрлЗркЯрк▓рлА рк╡ркЦркд ркЦрлЗркб ркХрк░рлЛ ркЫрлЛ",
        "67": "ркЦрлЗркб ркЦрк░рлНркЪ/ркПркХрк░",
        "68": "ркЬркорлАрки ркдрлИркпрк╛рк░рлА ркЦрк░рлНркЪ/ркПркХрк░",
        "69": "ркУрк░рлНркЧркирк┐ркХркВ ркХрккрк╛рк╕ркирлЛ ркмрлАркЬркирлЛ ркжрк░/ркПркХрк░",
        "70": "ркУрк░рлНркЧркирк┐ркХркВ ркХрккрк╛рк╕ркирк╛ ркмрлАркЬркирлА ркЬрк╛ркдркирлБркВ ркирк╛рко",
        "71": "ркмрлЛрк░рлНркбрк░ рккрк╛ркХркирлБркВ ркирк╛рко",
        "72": "ркЖркВркдрк░рккрк╛ркХркирлБркВ ркирк╛рко",
        "73": "ркХрк╡рк░ рккрк╛ркХркирлБркВ ркирк╛рко",
        "74": "ркЯрлНрк░рлЗркк рккрк╛ркХркирлБркВ ркирк╛рко",
        "75": "ркорк▓рлНркЪрк┐ркВркЧ рк╡рк╛рккрк░рлЛ ркЫрлЗ (рк╣рк╛/ркирк╛)",
        "76": "рк╡рккрк░рк╛ркпрлЗрк▓рк╛ ркорк▓рлНркЪрк┐ркВркЧркирлЛ рккрлНрк░ркХрк╛рк░ (ркЬрлИрк╡-рккрлНрк▓рк╛рк╕рлНркЯрк┐ркХ/рк▓рлАрк▓рлЛ/рк╕рлВркХрлЛ)",
        "77": "рк╕ркВркЧрлНрк░рк╣ ркжрк░ркорк┐ркпрк╛рки рк╢рлБркВ рк╕рк╛рк╡ркЪрлЗркдрлАркУ рк░рк╛ркЦрлЛ ркЫрлЛ",
        "78": "рк╡рлАркгрлА ркХрк░рлЗрк▓рк╛ ркХрккрк╛рк╕ркирк╛ рккрк░рк┐рк╡рк╣рки ркорк╛ркЯрлЗ ркнрк╛ркбрлЗ рк▓рлАркзрлЗрк▓ рк╡рк╛рк╣рки рк╡рккрк░рк╛ркп ркЫрлЗ (рк╣рк╛/ркирк╛)",
        "79": "рккрк░рк┐рк╡рк╣рки ркЦрк░рлНркЪ рк░рлВрккрк┐ркпрк╛/ркХрк┐рк▓рлЛ",
        "80": "ркжрлВрк╖ркг/ркЕрк╢рлБркжрлНркзрк┐ркУркирлЗ ркХрк╛рк░ркгрлЗ ркХрлЛркИрккркг ркЬркерлНркерк╛ркирлЛ ркЕрк╕рлНрк╡рлАркХрк╛рк░ (ркХрк┐рк▓рлЛ)",
        "81": "ркХрккрк╛рк╕ркирк╛ ркнрк╛рк╡ ркЬрк╛ркгрк╡рк╛ркирлА рк░рлАркд",  # Corrected translation
        "82": "ркЪрлБркХрк╡ркгрлА рк╡рлНркпрк╡рк╣рк╛рк░ркирлЛ рккрлНрк░ркХрк╛рк░ (рк░рлЛркХркбрк╛/ркУркирк▓рк╛ркЗрки)",
        "83": "рк╡рлЗркЪрк╛ркг ркХрк░рлНркпрк╛ рккркЫрлА ркХрлЗркЯрк▓рк╛ ркжрк┐рк╡рк╕рлЛркорк╛ркВ рк░рлВрккрлАркпрк╛ ркорк│рлЗ ркЫрлЗ",
        "84": "ркХрлЛркИрккркг рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ ркЕркерк╡рк╛ рк╕ркмрк╕рлАркбрлАркирлЛ рк▓рк╛ркн ркорк│рлЗ ркЫрлЗ (рк╣рк╛/ркирк╛)",
        "85": "рккрк╛ркХ рк╡рлАркорлЛ ркЙркдрк╛рк░рлЛ ркЫрлЛ (рк╣рк╛/ркирк╛)",
        "86": "ркжрк░ ркПркХрк░ рккрк╛ркХ рк╡рлАркорк╛ркирлЛ ркЦрк░рлНркЪ",  # Corrected translation (this was duplicated)
        "87": "ркХрк┐рк╢рк╛рки ркХрлНрк░рлЗркбрк┐ркЯ ркХрк╛рк░рлНркб ркЫрлЗ (рк╣рк╛/ркирк╛)",
        "88": "рк╕ркХрлНрк░рк┐ркп ркмрлЗркВркХ ркЦрк╛ркдрлБркВ ркЫрлЗ (рк╣рк╛/ркирк╛)",  # Corrected translation
        "89": "рккрк╛ркХ рклрлЗрк░ркмркжрк▓рлА ркХрк░рлЛ ркЫрлЛ (рк╣рк╛/ркирк╛)",
        "90": "рккрк╛ркХ рклрлЗрк░ркмркжрк▓рлА ркорк╛ркЯрлЗ рк╡рккрк░рк╛ркдрк╛ рккрк╛ркХ",
        "91": "ркХрлЛркИрккркг рккрк╛ркгрлА ркЯрлНрк░рлЗркХрк┐ркВркЧ ркЙрккркХрк░ркгрлЛркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЛ ркЫрлЛ (рк╣рк╛/ркирк╛)",  # Corrected translation
        "92": "ркХрлВрк╡рк╛ ркХрлЗ ркмрлЛрк░рк╡рлЗрк▓ркирк╛ рккркВрккркирлА ркХрлНрк╖ркоркдрк╛ (ркПркЪрккрлАркорк╛ркВ)",
        "93": "ркмрклрк░ ркЭрлЛрки ркЬрк╛рк│рк╡рлЛ ркЫрлЛ (рк╣рк╛/ркирк╛)",
        "94": "рккрк╛ркХркирк╛ ркЕрк╡рк╢рлЗрк╖рлЛркирлЛ ркЙрккркпрлЛркЧ (ркмрк│ркдркг/рккрк╢рлБркУркирлЛ ркЦрлЛрк░рк╛ркХ/ркмрк╛ркпрлЛркЪрк╛рк░/ркЬркорлАркиркорк╛ркВ ркнрлЗрк│рк╡рк╡рлБркВ/рк╕рк│ркЧрк╛рк╡рк╡рлБркВ/ркХркВрккрлЛрк╕рлНркЯ)",
        "95": "ркХрк╛ркоркжрк╛рк░ркирлЗ ркЪрлВркХрк╡ркгрлАркирлА рккркжрлНркзркдрк┐ (рк░рлЛркХркбрк╛/ркУркирк▓рк╛ркЗрки)",
        "96": "рккрлБрк░рлБрк╖ ркЕркирлЗ ркорк╣рк┐рк▓рк╛ ркХрк╛ркоркжрк╛рк░рлЛ ркорк╛ркЯрлЗ ркХрлЛркИрккркг рк╡рлЗркдрки ркдрклрк╛рк╡ркд (рк╣рк╛/ркирк╛)",  # This was incorrectly set to number_input in original logic
        "99": "ркХрк╛ркоркжрк╛рк░рлЛ ркорк╛ркЯрлЗ ркЖрк╢рлНрк░ркп ркЕркирлЗ рк╕рлБрк░ркХрлНрк╖рк┐ркд рккрлАрк╡рк╛ркирк╛ рккрк╛ркгрлАркирлА ркХрлЛркИ ркЬрлЛркЧрк╡рк╛ркИ",  # Reordered this from original to maintain numerical order
        "97": "ркХрлЛркИ рк╢рлНрк░рко рк░ркЬрлАрк╕рлНркЯрк░ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлА рк░рк╣рлНркпрк╛ ркЫрлЛ (рк╣рк╛/ркирк╛)",  # Reordered this from original to maintain numerical order
        "98": "ркХрк╛ркоркжрк╛рк░рлЛ ркорк╛ркЯрлЗ рк╕рк▓рк╛ркоркдрлА-ркХрлАркЯ/рккрлНрк░рк╛ркеркорк┐ркХ рк╕рк╛рк░рк╡рк╛рк░ркирлА ркХрлЛркИрккркг рк╡рлНркпрк╡рк╕рлНркерк╛",
        "100": "ркХрк╛ркоркжрк╛рк░рлЛ ркорк╛ркЯрлЗ рк╢рлМркЪрк╛рк▓ркпркирлА ркХрлЛркИ ркЬрлЛркЧрк╡рк╛ркИ",
        "101": "ркЦрлЗркдрлАркХрк╛ркоркорк╛ркВ ркХрлБркЯрлБркВркмркирк╛ рк╕ркнрлНркпрлЛ (ркорк╣рк┐рк▓рк╛ркУ) ркирлЗ рк╕рк╛ркорлЗрк▓ ркХрк░рлЛ ркЫрлЛ",
        "102": "ркХрлЛркИрккркг рк╕рк╛ркорлБркжрк╛ркпрк┐ркХ ркЬрк│ рк╕ркВркЪркп ркорк╛рк│ркЦрлБркВ (рк╣рк╛/ркирк╛)",
        "103": "ркорк╛ркЯрлА ркнрлЗркЬ ркорлАркЯрк░ркирлЛ ркЙрккркпрлЛркЧ (рк╣рк╛/ркирк╛)"
    },
}

# Define the questions using the keys from the dictionary
questions = [str(i) for i in range(1, 104)]  # Create a list of strings from "1" to "103"

# Get the translations for the selected language
labels = dict_translations.get(language, dict_translations["English"])

# --- Input Field Definitions for consistent use across form and review ---
numeric_questions = ["11", "12", "13", "14", "15", "16", "17", "20", "21", "22", "25", "26", "34", "37", "38", "39", "40", "41", "42", "43", "46", "47", "48", "49", "50", "51", "52", "53", "54", "57", "58", "59", "60", "61", "64", "65", "66", "67", "68", "69", "79", "80", "83", "86", "92"]
yes_no_questions = ["29", "30", "33", "56", "75", "78", "84", "85", "87", "88", "89", "91", "93", "96", "97", "98", "99", "100", "101", "102", "103"]
irrigation_source_options = ["Canal", "Well", "Borewell", "River", "Farm Pond", "Community Pond", "Rain-fed not irrigated"]
irrigation_method_options = ["Drip irrigation", "Sprinkler irrigation", "Flood irrigation", "Ridge and Furrow Irrigation", "Other"]
weeding_method_options = ["Manual", "Mechanical", "Both", "Other"]

# --- Session State Initialization for storing responses and flow control ---
if 'responses' not in st.session_state:
    st.session_state.responses = {}
if 'uploaded_photo_info' not in st.session_state:
    st.session_state.uploaded_photo_info = None # Stores filename and raw data for review
if 'form_submitted_for_review' not in st.session_state:
    st.session_state.form_submitted_for_review = False
if 'has_validation_error' not in st.session_state:
    st.session_state.has_validation_error = False

# --- Questionnaire Form Section ---
if not st.session_state.form_submitted_for_review:
    with st.form("questionnaire_form"):
        # Surveyor Name
        surveyor_name_label = ""
        if language == "English":
            surveyor_name_label = "Surveyor Name"
        elif language == "Hindi":
            surveyor_name_label = "рд╕рд░реНрд╡реЗрдпрд░ рдХрд╛ рдирд╛рдо"
        elif language == "Marathi":
            surveyor_name_label = "рд╕рд░реНрд╡реЗрдпрд░рдЪреЗ рдирд╛рд╡"
        elif language == "Gujarati":
            surveyor_name_label = "рк╕рк░рлНрк╡рлЗркпрк░ркирлБркВ ркирк╛рко"

        st.session_state.responses["surveyor_name"] = st.text_input(
            surveyor_name_label,
            key="surveyor_name_input",
            value=st.session_state.responses.get("surveyor_name", "") # Persist value
        )
        MULTISELECT_QUESTIONS = {
    "23": ["Certified", "Non-Certified", "IC1", "IC2", "Others"],
    "32": ["FPO", "FPC", "SHG", "Others"],
    "94": ["Fuel", "Cattle feed", "Biochar", "In-situ composting", "Burning"],
}

# Add these new numeric-only questions
additional_numeric_questions = ["3", "6", "37", "38", "39", "40", "41", "42", "57", "65", "67", "68", "69"]
numeric_questions = list(set(numeric_questions + additional_numeric_questions))

# Inside form rendering loop:
for question_key in questions:
    question_text = labels.get(question_key, f"Question {question_key} (No translation)")
    current_value = st.session_state.responses.get(question_key, "")

    if question_key in MULTISELECT_QUESTIONS:
        selected_values = current_value.split(", ") if isinstance(current_value, str) and current_value else []
        st.session_state.responses[question_key] = \
            st.multiselect(
                question_text,
                MULTISELECT_QUESTIONS[question_key],
                default=selected_values,
                key=f"question_{question_key}"
            )

    elif question_key in numeric_questions:
        num_val = float(current_value) if isinstance(current_value, (int, float)) or (isinstance(current_value, str) and current_value.replace('.', '', 1).isdigit()) else 0.0
        st.session_state.responses[question_key] = st.number_input(
            question_text,
            min_value=0.0,
            format="%.2f",
            key=f"question_{question_key}",
            value=num_val
        )


        for question_key in questions:
            question_text = labels.get(question_key, f"Question {question_key} (No translation)")

            # Retrieve existing value for persistence
            current_value = st.session_state.responses.get(question_key, "")

            if question_key == "4":  # Gender
                st.session_state.responses[question_key] = st.selectbox(
                    question_text,
                    ["Male", "Female", "Others"],
                    key=f"question_{question_key}",
                    index=["Male", "Female", "Others"].index(current_value) if current_value else 0
                )
                if st.session_state.responses[question_key] == "Others":
                    st.session_state.responses["others_gender"] = st.text_input(
                        "If selected Others, please specify:",
                        key="others_gender_specify",
                        value=st.session_state.responses.get("others_gender", "")
                    )
                else:
                    st.session_state.responses.pop("others_gender", None) # Remove if not "Others"
            
            elif question_key == "24":  # Source of irrigation
                st.session_state.responses[question_key] = st.selectbox(
                    question_text,
                    irrigation_source_options,
                    key=f"question_{question_key}",
                    index=irrigation_source_options.index(current_value) if current_value in irrigation_source_options else 0
                )

            elif question_key == "55":  # Irrigation method
                st.session_state.responses[question_key] = st.selectbox(
                    question_text,
                    irrigation_method_options,
                    key=f"question_{question_key}",
                    index=irrigation_method_options.index(current_value) if current_value in irrigation_method_options else 0
                )
                
            elif question_key == "63": # Weeding method used
                st.session_state.responses[question_key] = st.selectbox(
                    question_text,
                    weeding_method_options,
                    key=f"question_{question_key}",
                    index=weeding_method_options.index(current_value) if current_value in weeding_method_options else 0
                )

            elif question_key == "62":  # Harvesting time
                st.session_state.responses[question_key] = st.text_input(
                    question_text,
                    placeholder="e.g., month 1, month 2, month 3",
                    key=f"question_{question_key}",
                    value=current_value
                )
                
            elif question_key in yes_no_questions:
                # Determine initial index for selectbox
                default_index = 0 # Default to "Yes" or first option
                if current_value == "No":
                    default_index = 1
                elif current_value == "": # If no value, set to empty string for proper display
                    current_value = "Yes" # Default to 'Yes' for initial load if no value

                st.session_state.responses[question_key] = st.selectbox(
                    question_text,
                    ["Yes", "No"],
                    key=f"question_{question_key}",
                    index=default_index
                )

            elif question_key in numeric_questions:
                if language == "Gujarati" and question_key == "95":
                    st.session_state.responses[question_key] = st.text_input(
                        question_text,
                        key=f"question_{question_key}",
                        value=current_value
                    )
                else:
                    # Convert to float for number_input, handle empty string case
                    num_val = float(current_value) if isinstance(current_value, (int, float)) or (isinstance(current_value, str) and current_value.replace('.', '', 1).isdigit()) else 0.0
                    st.session_state.responses[question_key] = st.number_input(
                        question_text,
                        min_value=0.0,
                        format="%.2f",
                        key=f"question_{question_key}",
                        value=num_val
                    )
            else:
                st.session_state.responses[question_key] = st.text_input(
                    question_text,
                    key=f"question_{question_key}",
                    value=current_value
                )

        # Photo Upload (using a placeholder for initial load, then the actual uploaded file)
        uploaded_photo = st.file_uploader(
            "Upload a photo (optional):",
            type=["jpg", "jpeg", "png"],
            key="uploaded_photo_form",
        )
        if uploaded_photo:
            st.session_state.uploaded_photo_info = {
                "name": uploaded_photo.name,
                "data": uploaded_photo.getvalue(),
                "type": uploaded_photo.type
            }
        elif st.session_state.uploaded_photo_info and st.session_state.uploaded_photo_info.get("data"):
            # Display previously uploaded image if available in session state
            st.image(st.session_state.uploaded_photo_info["data"], caption="Previously uploaded photo", width=100)
            if st.button("Clear Photo", key="clear_photo_button"):
                st.session_state.uploaded_photo_info = None
                st.rerun() # Rerun to clear the displayed image

        # Submit Button for Review
        if st.form_submit_button("Review and Proceed"):
            # Perform validation here directly when the form is submitted for review
            st.session_state.has_validation_error = False # Reset error flag

            if not st.session_state.responses.get("surveyor_name"):
                st.error("Surveyor Name is required.")
                st.session_state.has_validation_error = True

            required_fields = ["1", "2", "3", "4", "6", "8", "9", "10", "34", "35", "37", "39", "41", "42"]
            for field in required_fields:
                val = st.session_state.responses.get(field)
                if val is None or val == "" or \
                   (isinstance(val, (int, float)) and val == 0 and field in ["34", "37", "39", "41", "42"]):
                    st.error(f"Field '{labels[field]}' is required.")
                    st.session_state.has_validation_error = True

            # Phone number validation
            phone_number = str(st.session_state.responses.get("3", "")).strip()
            if not phone_number.isdigit() or len(phone_number) != 10:
                st.error("Mobile no. must be exactly 10 digits.")
                st.session_state.has_validation_error = True
            
            # Numeric field validation
            for field in numeric_questions:
                if field == "95" and language == "Gujarati":
                    continue
                
                val = st.session_state.responses.get(field)
                try:
                    if val is not None and float(val) < 0:
                        st.error(f"Field '{labels[field]}' must be a non-negative number.")
                        st.session_state.has_validation_error = True
                        break
                except (ValueError, TypeError):
                    st.error(f"Field '{labels[field]}' must be a valid number.")
                    st.session_state.has_validation_error = True
                    break

            # Harvesting time validation
            harvesting_time = st.session_state.responses.get("62")
            if harvesting_time:
                months = [m.strip() for m in harvesting_time.split(",") if m.strip()]
                if len(months) != 3:
                    st.error("Please enter exactly three months separated by commas for 'Harvesting time'.")
                    st.session_state.has_validation_error = True

            if not st.session_state.has_validation_error:
                st.session_state.form_submitted_for_review = True
                st.rerun() # Rerun to display the review page

# --- Review and Submit Section ---
if st.session_state.form_submitted_for_review and not st.session_state.has_validation_error:
    st.header("Review Your Submission")
    st.markdown("---")

    # Display collected data for review
    st.subheader("General Information")
    st.write(f"**Surveyor Name:** {st.session_state.responses.get('surveyor_name')}")
    st.write(f"**{labels.get('1', 'Farmer Tracenet Code')}:** {st.session_state.responses.get('1')}")
    st.write(f"**{labels.get('2', 'Farmer Full Name')}:** {st.session_state.responses.get('2')}")
    st.write(f"**{labels.get('3', 'Mobile no.')}:** {st.session_state.responses.get('3')}")
    st.write(f"**{labels.get('4', 'Gender')}:** {st.session_state.responses.get('4')}")
    if st.session_state.responses.get('4') == "Others":
        st.write(f"**If selected Others, please specify:** {st.session_state.responses.get('others_gender')}")

    st.subheader("Location Details")
    st.write(f"**{labels.get('6', 'Village')}:** {st.session_state.responses.get('6')}")
    st.write(f"**{labels.get('7', 'Taluka/Block')}:** {st.session_state.responses.get('7')}")
    st.write(f"**{labels.get('8', 'District')}:** {st.session_state.responses.get('8')}")
    st.write(f"**{labels.get('9', 'State')}:** {st.session_state.responses.get('9')}")
    st.write(f"**{labels.get('10', 'Pincode')}:** {st.session_state.responses.get('10')}")

    st.subheader("Household Information")
    st.write(f"**{labels.get('11', 'No. of males (adult) in household')}:** {st.session_state.responses.get('11')}")
    st.write(f"**{labels.get('12', 'No. of females (adult) in household')}:** {st.session_state.responses.get('12')}")
    st.write(f"**{labels.get('13', 'Children (<16) in household')}:** {st.session_state.responses.get('13')}")
    st.write(f"**{labels.get('14', 'Total Member of Household')}:** {st.session_state.responses.get('14')}")
    st.write(f"**{labels.get('15', 'No. of school-going children')}:** {st.session_state.responses.get('15')}")
    st.write(f"**{labels.get('16', 'No. of earning members in the family')}:** {st.session_state.responses.get('16')}")
    st.write(f"**{labels.get('34', 'Annual household income(in Rs)')}:** {st.session_state.responses.get('34')}")
    st.write(f"**{labels.get('35', 'Primary source of income')}:** {st.session_state.responses.get('35')}")
    st.write(f"**{labels.get('36', 'Secondary source of income')}:** {st.session_state.responses.get('36')}")
    st.write(f"**{labels.get('37', 'Income from Primary source (Rs.)')}:** {st.session_state.responses.get('37')}")

    st.subheader("Farming Details")
    st.write(f"**{labels.get('17', 'Total Landholding (in acres)')}:** {st.session_state.responses.get('17')}")
    st.write(f"**{labels.get('18', 'Primary crop')}:** {st.session_state.responses.get('18')}")
    st.write(f"**{labels.get('19', 'Secondary crops')}:** {st.session_state.responses.get('19')}")
    st.write(f"**{labels.get('20', 'Non-organic Cotton land (in acre) (if any)')}:** {st.session_state.responses.get('20')}")
    st.write(f"**{labels.get('21', 'Organic Cotton land (in acre)')}:** {st.session_state.responses.get('21')}")
    st.write(f"**{labels.get('22', 'Years since practicing organic cotton (#)')}:** {st.session_state.responses.get('22')}")
    st.write(f"**{labels.get('23', 'Certification status (certified/IC1..)')}:** {st.session_state.responses.get('23')}")
    st.write(f"**{labels.get('24', 'Source of irrigation')}:** {st.session_state.responses.get('24')}")
    st.write(f"**{labels.get('25', 'Cultivable area (acre)')}:** {st.session_state.responses.get('25')}")
    st.write(f"**{labels.get('26', 'No. of cattle (cow and Buffalo)')}:** {st.session_state.responses.get('26')}")
    st.write(f"**{labels.get('27', 'Source of drinking water')}:** {st.session_state.responses.get('27')}")
    st.write(f"**{labels.get('28', 'Preferred selling point (Aggregator/Suminter/APMC/other Gin)')}:** {st.session_state.responses.get('28')}")
    st.write(f"**{labels.get('29', 'Has space for harvested cotton storage (Y/N)')}:** {st.session_state.responses.get('29')}")
    st.write(f"**{labels.get('30', 'Receives any agro advisory (Y/N)')}:** {st.session_state.responses.get('30')}")
    st.write(f"**{labels.get('31', 'Received any training on best practices for organic cotton?')}:** {st.session_state.responses.get('31')}")
    st.write(f"**{labels.get('32', 'Membership in FPO/FPC/SHG')}:** {st.session_state.responses.get('32')}")
    st.write(f"**{labels.get('33', 'Maintaining any Diary or Register for record keeping (Y/N)')}:** {st.session_state.responses.get('33')}")
    st.write(f"**{labels.get('38', 'Certification cost per annum/acre')}:** {st.session_state.responses.get('38')}")
    st.write(f"**{labels.get('39', 'Avg. production of organic cotton/acre (Kg)')}:** {st.session_state.responses.get('39')}")
    st.write(f"**{labels.get('40', 'Cost of cultivation/acre (Rs)')}:** {st.session_state.responses.get('40')}")
    st.write(f"**{labels.get('41', 'Quantity sold of organic cotton (in kg)')}:** {st.session_state.responses.get('41')}")
    st.write(f"**{labels.get('42', 'Selling price per kg (Rs.)')}:** {st.session_state.responses.get('42')}")
    st.write(f"**{labels.get('43', 'Material cost for bio-inputs')}:** {st.session_state.responses.get('43')}")
    st.write(f"**{labels.get('44', 'Name of bio-input used for pest and disease management')}:** {st.session_state.responses.get('44')}")
    st.write(f"**{labels.get('45', 'Name of bio-fertilizer/compost used')}:** {st.session_state.responses.get('45')}")
    st.write(f"**{labels.get('46', 'No. of pheromone traps used / acre')}:** {st.session_state.responses.get('46')}")
    st.write(f"**{labels.get('47', 'Cost per pheromone trap')}:** {st.session_state.responses.get('47')}")
    st.write(f"**{labels.get('48', 'No. of Yellow sticky traps used / acre')}:** {st.session_state.responses.get('48')}")
    st.write(f"**{labels.get('49', 'Cost per yellow sticky trap')}:** {st.session_state.responses.get('49')}")
    st.write(f"**{labels.get('50', 'No. of Blue sticky traps used / acre')}:** {st.session_state.responses.get('50')}")
    st.write(f"**{labels.get('51', 'Cost per blue sticky trap')}:** {st.session_state.responses.get('51')}")
    st.write(f"**{labels.get('52', 'No. of bird perches used / acre')}:** {st.session_state.responses.get('52')}")
    st.write(f"**{labels.get('53', 'Irrigation cost/acre')}:** {st.session_state.responses.get('53')}")
    st.write(f"**{labels.get('54', 'No. of irrigation required for organic cotton')}:** {st.session_state.responses.get('54')}")
    st.write(f"**{labels.get('55', 'Irrigation method used')}:** {st.session_state.responses.get('55')}")
    st.write(f"**{labels.get('56', 'Any farm machinery hired (Y/N)')}:** {st.session_state.responses.get('56')}")
    st.write(f"**{labels.get('57', 'Cost of machinery hiring (Rs.)/acre')}:** {st.session_state.responses.get('57')}")
    st.write(f"**{labels.get('58', 'Local labour cost per day')}:** {st.session_state.responses.get('58')}")
    st.write(f"**{labels.get('59', 'Migrant labour cost per day')}:** {st.session_state.responses.get('59')}")
    st.write(f"**{labels.get('60', 'No. of workers required during sowing/acre')}:** {st.session_state.responses.get('60')}")
    st.write(f"**{labels.get('61', 'No. of workers required during harvesting/acre')}:** {st.session_state.responses.get('61')}")
    st.write(f"**{labels.get('62', 'Harvesting time (1st, 2nd & 3rd picking) (month)')}:** {st.session_state.responses.get('62')}")
    st.write(f"**{labels.get('63', 'Weeding method used (manual/mechanical)')}:** {st.session_state.responses.get('63')}")
    st.write(f"**{labels.get('64', 'Weeding cost/acre')}:** {st.session_state.responses.get('64')}")
    st.write(f"**{labels.get('65', 'Cost of mulching/acre')}:** {st.session_state.responses.get('65')}")
    st.write(f"**{labels.get('66', 'No. of tillage practiced')}:** {st.session_state.responses.get('66')}")
    st.write(f"**{labels.get('67', 'Tillage cost/acre')}:** {st.session_state.responses.get('67')}")
    st.write(f"**{labels.get('68', 'Land preparation cost/acre')}:** {st.session_state.responses.get('68')}")
    st.write(f"**{labels.get('69', 'Seed rate of organic cotton/acre')}:** {st.session_state.responses.get('69')}")
    st.write(f"**{labels.get('70', 'Variety of organic cotton seed (Name)')}:** {st.session_state.responses.get('70')}")
    st.write(f"**{labels.get('71', 'Name of border crop used')}:** {st.session_state.responses.get('71')}")
    st.write(f"**{labels.get('72', 'Name of the inter crop used')}:** {st.session_state.responses.get('72')}")
    st.write(f"**{labels.get('73', 'Name of cover crop')}:** {st.session_state.responses.get('73')}")
    st.write(f"**{labels.get('74', 'Name of trap crop')}:** {st.session_state.responses.get('74')}")
    st.write(f"**{labels.get('75', 'Mulching used (Y/N)')}:** {st.session_state.responses.get('75')}")
    st.write(f"**{labels.get('76', 'Type of mulching used (Bio-plastic/green/dry)')}:** {st.session_state.responses.get('76')}")
    st.write(f"**{labels.get('77', 'What precautions used during storage')}:** {st.session_state.responses.get('77')}")
    st.write(f"**{labels.get('78', 'Hired vehicle used for transportation of seed cotton (Y/N)')}:** {st.session_state.responses.get('78')}")
    st.write(f"**{labels.get('79', 'Transportation cost (Rs.)/Kg of seed cotton')}:** {st.session_state.responses.get('79')}")
    st.write(f"**{labels.get('80', 'Any quantity rejection due to contamination/impurities (Kg)')}:** {st.session_state.responses.get('80')}")
    st.write(f"**{labels.get('81', 'Price discovery mechanism')}:** {st.session_state.responses.get('81')}")
    st.write(f"**{labels.get('82', 'Payment Transaction type (Cash/online)')}:** {st.session_state.responses.get('82')}")
    st.write(f"**{labels.get('83', 'Days of credit after sell')}:** {st.session_state.responses.get('83')}")
    st.write(f"**{labels.get('84', 'Availing any govt. scheme or subsidy benefits (Y/N)')}:** {st.session_state.responses.get('84')}")
    st.write(f"**{labels.get('85', 'Opted for crop insurance (Y/N)')}:** {st.session_state.responses.get('85')}")
    st.write(f"**{labels.get('86', 'Cost of crop insurance per acre')}:** {st.session_state.responses.get('86')}")
    st.write(f"**{labels.get('87', 'Possess KCC (Y/N)')}:** {st.session_state.responses.get('87')}")
    st.write(f"**{labels.get('88', 'Possess active bank account (Y/N)')}:** {st.session_state.responses.get('88')}")
    st.write(f"**{labels.get('89', 'Crop rotation used (Y/N)')}:** {st.session_state.responses.get('89')}")
    st.write(f"**{labels.get('90', 'Crops used for rotation')}:** {st.session_state.responses.get('90')}")
    st.write(f"**{labels.get('91', 'Using any water tracking devices (Y/N)')}:** {st.session_state.responses.get('91')}")
    st.write(f"**{labels.get('92', 'Capacity of pump (in HP)')}:** {st.session_state.responses.get('92')}")
    st.write(f"**{labels.get('93', 'Maintaining Buffer zone (Y/N)')}:** {st.session_state.responses.get('93')}")
    st.write(f"**{labels.get('94', 'Utilization of crop residue (Fuel/cattle feed/biochar/in-situ composting/burning)')}:** {st.session_state.responses.get('94')}")
    st.write(f"**{labels.get('95', 'Mode of payment to workers (cash/online)')}:** {st.session_state.responses.get('95')}")
    st.write(f"**{labels.get('96', 'Any wage difference for Men and Women workers (Y/N)')}:** {st.session_state.responses.get('96')}")
    st.write(f"**{labels.get('97', 'Using any labour register (Y/N)')}:** {st.session_state.responses.get('97')}")
    st.write(f"**{labels.get('98', 'Any arrangement of safety-kit / first-aid for workers')}:** {st.session_state.responses.get('98')}")
    st.write(f"**{labels.get('99', 'Any provision of shelter & safe drinking water for workers')}:** {st.session_state.responses.get('99')}")
    st.write(f"**{labels.get('100', 'Any provision for lavatory for workers')}:** {st.session_state.responses.get('100')}")
    st.write(f"**{labels.get('101', 'Involve family members (Women) in agricultural operations')}:** {st.session_state.responses.get('101')}")
    st.write(f"**{labels.get('102', 'Any community water harvesting structure (Y/N)')}:** {st.session_state.responses.get('102')}")
    st.write(f"**{labels.get('103', 'Use of soil moisture meter (Y/N)')}:** {st.session_state.responses.get('103')}")


    if st.session_state.uploaded_photo_info:
        st.subheader("Uploaded Photo")
        st.image(st.session_state.uploaded_photo_info["data"], caption=st.session_state.uploaded_photo_info["name"], use_container_width=True)

    col1, col2 = st.columns(2)
    with col1:
        if st.button("Edit Responses", key="edit_responses_button"):
            st.session_state.form_submitted_for_review = False
            st.rerun()
    with col2:
        if st.button("Confirm and Submit", key="confirm_submit_button"):
            # This is where the final submission logic goes
            # Save the uploaded photo (if available)
            photo_filename = None
            if st.session_state.uploaded_photo_info:
                photo_filename = f"photo_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}_{st.session_state.uploaded_photo_info['name']}"
                photo_path = os.path.join(PHOTOS_DIR, photo_filename)
                try:
                    with open(photo_path, "wb") as f:
                        f.write(st.session_state.uploaded_photo_info["data"])
                    st.success(f"Photo uploaded and saved as {photo_filename}.")
                    st.session_state.responses["uploaded_photo_filename"] = photo_filename # Store filename in responses
                except Exception as e:
                    st.error(f"Error saving photo: {e}")
                    st.session_state.has_validation_error = True

            if not st.session_state.has_validation_error:
                current_timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                final_data = {}
                for k, v in st.session_state.responses.items():
                    if k in labels:
                        final_data[labels[k]] = v
                    else:
                        if k == "surveyor_name":
                            final_data["Surveyor Name"] = v
                        elif k == "uploaded_photo_filename":
                            final_data["Uploaded Photo"] = v
                        elif k == "others_gender": # Include 'others_gender' if present
                            final_data["Others Gender Specify"] = v
                
                final_data["Submission Timestamp"] = current_timestamp

                now = datetime.datetime.now()
                filename = f"survey_{now.strftime('%Y%m%d_%H%M%S')}.csv"
                df = pd.DataFrame([final_data])
                
                try:
                    df.to_csv(os.path.join(SAVE_DIR, filename), index=False, encoding="utf-8")
                    st.success("тЬЕ Survey Submitted and Saved!")
                    # Clear session state for a new submission
                    st.session_state.responses = {}
                    st.session_state.uploaded_photo_info = None
                    st.session_state.form_submitted_for_review = False
                    st.session_state.has_validation_error = False
                    st.rerun() # Rerun to clear the form and show success message
                except Exception as e:
                    st.error(f"Error saving survey data: {e}")
                    st.session_state.has_validation_error = True

# --- Admin Real-Time Access ---
st.divider()
st.header("Admin Real-Time Access")
st.markdown("---")

ALLOWED_EMAILS = ["shifalis@tns.org", "rmukherjee@tns.org", "rsomanchi@tns.org", "mkaushal@tns.org", "ksuneha@tns.org"]
admin_email = st.text_input("Enter your Admin Email to unlock extra features:", key="admin_email_input")

if admin_email in ALLOWED_EMAILS:
    st.success("тЬЕ Admin access granted! Real-time view enabled.")

    if st.checkbox("ЁЯЦ╝я╕П View and Download Uploaded Images"):
        image_files = [f for f in os.listdir(PHOTOS_DIR) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
        if image_files:
            for img_file in image_files:
                img_path = os.path.join(PHOTOS_DIR, img_file)
                try:
                    img = Image.open(img_path)
                    img.verify()
                    st.image(img_path, caption=img_file, use_container_width=True)
                    with open(img_path, "rb") as img_bytes:
                        st.download_button(
                            label=f"тмЗя╕П Download {img_file}",
                            data=img_bytes.read(),
                            file_name=img_file,
                            mime="image/jpeg" if img_file.lower().endswith(('.jpg', '.jpeg')) else "image/png",
                            key=f"download_{img_file}"
                        )
                except Exception as e:
                    st.warning(f"тЪая╕П Unable to display image: {img_file}. Error: {str(e)}")

            st.markdown("---")
            st.subheader("Download All Photos")
            
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zip_file:
                for img_file in image_files:
                    img_path = os.path.join(PHOTOS_DIR, img_file)
                    zip_file.write(img_path, os.path.basename(img_path))
            
            zip_buffer.seek(0)
            
            st.download_button(
                label="тмЗя╕П Download All Photos as ZIP",
                data=zip_buffer.getvalue(),
                file_name="all_photos.zip",
                mime="application/zip",
            )
        else:
            st.warning("тЪая╕П No images found.")

    if st.checkbox("ЁЯУД View Past Submissions"):
        files = [f for f in os.listdir(SAVE_DIR) if f.endswith('.csv')]
        if files:
            all_data = pd.concat([pd.read_csv(os.path.join(SAVE_DIR, f)) for f in files], ignore_index=True)
            st.dataframe(all_data)
            
            csv = all_data.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="тмЗя╕П Download All Responses",
                data=csv,
                file_name='all_survey_responses.csv',
                mime='text/csv'
            )
        else:
            st.warning("тЪая╕П No submissions found yet.")
