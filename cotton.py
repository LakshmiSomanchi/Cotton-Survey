import streamlit as st
import pandas as pd
import datetime
import os
import io
import shutil
import zipfile

# --- Configuration & Constants ---
ADMIN_USERS = {"ksuneha@tns.org", "rsomanchi@tns.org", "shifalis@tns.org"}
SAVE_DIR = "responses"
PHOTOS_DIR = "photos"
SAVE_CSV_PATH = os.path.join(SAVE_DIR, "all_survey_responses_persistent.csv")

# Create directories if they don't exist
os.makedirs(SAVE_DIR, exist_ok=True)
os.makedirs(PHOTOS_DIR, exist_ok=True)

# Set Streamlit page config
st.set_page_config(page_title="Cotton Farming Questionnaire", layout="wide")
st.title("üåæ Cotton Farming Questionnaire (‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§∞‡•ç‡§µ‡•á)")

# --- Session State Initialization ---
def initialize_session_state():
    """Initializes all necessary session state variables."""
    if 'responses' not in st.session_state:
        st.session_state.responses = {}
    if 'uploaded_photo_info' not in st.session_state:
        st.session_state.uploaded_photo_info = None
    if 'form_submitted_for_review' not in st.session_state:
        st.session_state.form_submitted_for_review = False
    if 'has_validation_error' not in st.session_state:
        st.session_state.has_validation_error = False
    if 'admin_logged_in' not in st.session_state:
        st.session_state.admin_logged_in = False
    if 'all_survey_data' not in st.session_state:
        if os.path.exists(SAVE_CSV_PATH):
            try:
                st.session_state.all_survey_data = pd.read_csv(SAVE_CSV_PATH, encoding='utf-8')
                st.info(f"Loaded {len(st.session_state.all_survey_data)} existing responses.")
            except pd.errors.EmptyDataError:
                st.session_state.all_survey_data = pd.DataFrame()
                st.info("Existing CSV found but was empty. Initializing new DataFrame.")
            except Exception as e:
                st.error(f"Error loading existing survey data: {e}. Starting with an empty DataFrame.")
                st.session_state.all_survey_data = pd.DataFrame()
        else:
            st.session_state.all_survey_data = pd.DataFrame()
            st.info("No existing survey data found. Starting a new DataFrame.")

initialize_session_state()

# --- Translations Dictionary ---
dict_translations = {
    "English": {
        "1": "Farmer Tracenet Code", "2": "Farmer Full Name", "3": "Mobile no.", "4": "Gender",
        "5": "Highest education", "6": "Village", "7": "Taluka/Block", "8": "District",
        "9": "State", "10": "Pincode", "11": "No. of males (adult) in household",
        "12": "No. of females (adult) in household", "13": "Children (<16) in household",
        "14": "Total Member of Household", "15": "No. of school-going children",
        "16": "No. of earning members in the family", "17": "Total Landholding (in acres)",
        "18": "Primary crop", "19": "Secondary crops", "20": "Non-organic Cotton land (in acre) (if any)",
        "21": "Organic Cotton land (in acre)", "22": "Years since practicing organic cotton (#)",
        "23": "Certification status (certified/IC1..)", "24": "Source of irrigation",
        "25": "Cultivable area (acre)", "26": "No. of cattle (cow and Buffalo)",
        "27": "Source of drinking water", "28": "Preferred selling point (Aggregator/Suminter/APMC/other Gin)",
        "29": "Has space for harvested cotton storage (Y/N)", "30": "Receives any agro advisory (Y/N)",
        "31": "Received any training on best practices for organic cotton?",
        "32": "Membership in FPO/FPC/SHG", "33": "Maintaining any Diary or Register for record keeping (Y/N)",
        "34": "Annual household income(in Rs)", "35": "Primary source of income",
        "36": "Secondary source of income", "37": "Income from Primary source (Rs.)",
        "38": "Certification cost per annum/acre", "39": "Avg. production of organic cotton/acre (Kg)",
        "40": "Cost of cultivation/acre (Rs)", "41": "Quantity sold of organic cotton (in kg)",
        "42": "Selling price per kg (Rs.)", "43": "Material cost for bio-inputs",
        "44": "Name of bio-input used for pest and disease management",
        "45": "Name of bio-fertilizer/compost used", "46": "No. of pheromone traps used / acre",
        "47": "Cost per pheromone trap", "48": "No. of Yellow sticky traps used / acre",
        "49": "Cost per yellow sticky trap", "50": "No. of Blue sticky traps used / acre",
        "51": "Cost per blue sticky trap", "52": "No. of bird perches used / acre",
        "53": "Irrigation cost/acre", "54": "No. of irrigation required for organic cotton",
        "55": "Irrigation method used", "56": "Any farm machinery hired (Y/N)",
        "57": "Cost of machinery hiring (Rs.)/acre", "58": "Local labour cost per day",
        "59": "Migrant labour cost per day", "60": "No. of workers required during sowing/acre",
        "61": "No. of workers required during harvesting/acre",
        "62": "Harvesting time (1st, 2nd & 3rd picking) (month)",
        "63": "Weeding method used (manual/mechanical)", "64": "Weeding cost/acre",
        "65": "Cost of mulching/acre", "66": "No. of tillage practiced", "67": "Tillage cost/acre",
        "68": "Land preparation cost/acre", "69": "Seed rate of organic cotton/acre",
        "70": "Variety of organic cotton seed (Name)", "71": "Name of border crop used",
        "72": "Name of the inter crop used", "73": "Name of cover crop", "74": "Name of trap crop",
        "75": "Mulching used (Y/N)", "76": "Type of mulching used (Bio-plastic/green/dry)",
        "77": "What precautions used during storage", "78": "Hired vehicle used for transportation of seed cotton (Y/N)",
        "79": "Transportation cost (Rs.)/Kg of seed cotton",
        "80": "Any quantity rejection due to contamination/impurities (Kg)",
        "81": "Price discovery mechanism", "82": "Payment Transaction type (Cash/online)",
        "83": "Days of credit after sell", "84": "Availing any govt. scheme or subsidy benefits (Y/N)",
        "85": "Opted for crop insurance (Y/N)", "86": "Cost of crop insurance per acre",
        "87": "Possess KCC (Y/N)", "88": "Possess active bank account (Y/N)",
        "89": "Crop rotation used (Y/N)", "90": "Crops used for rotation",
        "91": "Using any water tracking devices (Y/N)", "92": "Capacity of pump (in HP)",
        "93": "Maintaining Buffer zone (Y/N)",
        "94": "Utilization of crop residue (Fuel/cattle feed/biochar/in-situ composting/burning)",
        "95": "Mode of payment to workers (cash/online)",
        "96": "Any wage difference for Men and Women workers (Y/N)",
        "97": "Using any labour register (Y/N)",
        "98": "Any arrangement of safety-kit / first-aid for workers",
        "99": "Any provision of shelter & safe drinking water for workers",
        "100": "Any provision for lavatory for workers",
        "101": "Involve family members (Women) in agricultural operations",
        "102": "Any community water harvesting structure (Y/N)",
        "103": "Use of soil moisture meter (Y/N)",
        "surveyor_name_key": "Surveyor Name"
    },
    "Hindi": {
        "1": "‡§ï‡§ø‡§∏‡§æ‡§® ‡§ü‡•ç‡§∞‡•á‡§∏‡•á‡§®‡•á‡§ü ‡§ï‡•ã‡§°", "2": "‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ", "3": "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞", "4": "‡§≤‡§ø‡§Ç‡§ó",
        "5": "‡§â‡§ö‡•ç‡§ö‡§§‡§Æ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ", "6": "‡§ó‡§æ‡§Å‡§µ", "7": "‡§§‡§æ‡§≤‡•Å‡§ï‡§æ/‡§¨‡•ç‡§≤‡•â‡§ï", "8": "‡§ú‡§ø‡§≤‡§æ",
        "9": "‡§∞‡§æ‡§ú‡•ç‡§Ø", "10": "‡§™‡§ø‡§®‡§ï‡•ã‡§°", "11": "‡§ò‡§∞ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§∞‡•Å‡§∑‡•ã‡§Ç (‡§µ‡§Ø‡§∏‡•ç‡§ï) ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
        "12": "‡§ò‡§∞ ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§ø‡§≤‡§æ‡§ì‡§Ç (‡§µ‡§Ø‡§∏‡•ç‡§ï) ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ", "13": "‡§ò‡§∞ ‡§Æ‡•á‡§Ç ‡§¨‡§ö‡•ç‡§ö‡•á (<16)",
        "14": "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§ï‡•Å‡§≤ ‡§∏‡§¶‡§∏‡•ç‡§Ø", "15": "‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
        "16": "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡§Æ‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ", "17": "‡§ï‡•Å‡§≤ ‡§≠‡•Ç‡§Æ‡§ø ‡§ú‡•ã‡§§ (‡§è‡§ï‡§°‡§º ‡§Æ‡•á‡§Ç)",
        "18": "‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§´‡§∏‡§≤", "19": "‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø‡§ï ‡§´‡§∏‡§≤‡•á‡§Ç", "20": "‡§ó‡•à‡§∞-‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡§™‡§æ‡§∏ ‡§≠‡•Ç‡§Æ‡§ø (‡§è‡§ï‡§°‡§º ‡§Æ‡•á‡§Ç) (‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§π‡•ã)",
        "21": "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡§™‡§æ‡§∏ ‡§≠‡•Ç‡§Æ‡§ø (‡§è‡§ï‡§°‡§º ‡§Æ‡•á‡§Ç)", "22": "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡§™‡§æ‡§∏ ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∏‡•á ‡§µ‡§∞‡•ç‡§∑ (#)",
        "23": "‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø (‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§/IC1..)", "24": "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§æ ‡§∏‡•ç‡§∞‡•ã‡§§",
        "25": "‡§ï‡•É‡§∑‡§ø ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§è‡§ï‡§°‡§º)", "26": "‡§Æ‡§µ‡•á‡§∂‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ (‡§ó‡§æ‡§Ø ‡§î‡§∞ ‡§≠‡•à‡§Ç‡§∏)",
        "27": "‡§™‡•Ä‡§®‡•á ‡§ï‡•á ‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§∏‡•ç‡§∞‡•ã‡§§", "28": "‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§¨‡§ø‡§Ç‡§¶‡•Å (‡§è‡§ó‡•ç‡§∞‡•Ä‡§ó‡•á‡§ü‡§∞/‡§∏‡•Å‡§Æ‡§ø‡§Ç‡§ü‡§∞/‡§è‡§™‡•Ä‡§è‡§Æ‡§∏‡•Ä/‡§Ö‡§®‡•ç‡§Ø ‡§ú‡§ø‡§®)",
        "29": "‡§ï‡§ü‡•Ä ‡§π‡•Å‡§à ‡§ï‡§™‡§æ‡§∏ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§ó‡§π ‡§π‡•à (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)", "30": "‡§ï‡•ã‡§à ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•ã‡§§‡§æ ‡§π‡•à (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "31": "‡§ï‡•ç‡§Ø‡§æ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡§™‡§æ‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§™‡•ç‡§∞‡§•‡§æ‡§ì‡§Ç ‡§™‡§∞ ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•Å‡§Ü ‡§π‡•à?",
        "32": "‡§è‡§´‡§™‡•Ä‡§ì/‡§è‡§´‡§™‡•Ä‡§∏‡•Ä/‡§è‡§∏‡§è‡§ö‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§§‡§æ", "33": "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§°‡§æ‡§Ø‡§∞‡•Ä ‡§Ø‡§æ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡§®‡§æ (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "34": "‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§ò‡§∞‡•á‡§≤‡•Ç ‡§Ü‡§Ø (‡§∞‡•Å‡§™‡§Ø‡•á ‡§Æ‡•á‡§Ç)", "35": "‡§Ü‡§Ø ‡§ï‡§æ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§∏‡•ç‡§∞‡•ã‡§§",
        "36": "‡§Ü‡§Ø ‡§ï‡§æ ‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø‡§ï ‡§∏‡•ç‡§∞‡•ã‡§§", "37": "‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§∏‡•ç‡§∞‡•ã‡§§ ‡§∏‡•á ‡§Ü‡§Ø (‡§∞‡•Å.)",
        "38": "‡§™‡•ç‡§∞‡§§‡§ø ‡§µ‡§∞‡•ç‡§∑/‡§è‡§ï‡§°‡§º ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ ‡§≤‡§æ‡§ó‡§§", "39": "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡§™‡§æ‡§∏/‡§è‡§ï‡§°‡§º ‡§ï‡§æ ‡§î‡§∏‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® (‡§ï‡§ø‡§≤‡•ã)",
        "40": "‡§™‡•ç‡§∞‡§§‡§ø ‡§è‡§ï‡§°‡§º ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•Ä ‡§≤‡§æ‡§ó‡§§ (‡§∞‡•Å)", "41": "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡§™‡§æ‡§∏ ‡§ï‡•Ä ‡§¨‡•á‡§ö‡•Ä ‡§ó‡§à ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ (‡§ï‡§ø‡§≤‡•ã ‡§Æ‡•á‡§Ç)",
        "42": "‡§™‡•ç‡§∞‡§§‡§ø ‡§ï‡§ø‡§≤‡•ã ‡§µ‡§ø‡§ï‡•ç‡§∞‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø (‡§∞‡•Å.)", "43": "‡§ú‡•à‡§µ-‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§≤‡§æ‡§ó‡§§",
        "44": "‡§ï‡•Ä‡§ü ‡§î‡§∞ ‡§∞‡•ã‡§ó ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§è ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ú‡•à‡§µ-‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡§æ ‡§®‡§æ‡§Æ",
        "45": "‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§è ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ú‡•à‡§µ-‡§â‡§∞‡•ç‡§µ‡§∞‡§ï/‡§ñ‡§æ‡§¶ ‡§ï‡§æ ‡§®‡§æ‡§Æ", "46": "‡§´‡•á‡§∞‡•ã‡§Æ‡•ã‡§® ‡§ú‡§æ‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó / ‡§è‡§ï‡§°‡§º",
        "47": "‡§™‡•ç‡§∞‡§§‡§ø ‡§´‡•á‡§∞‡•ã‡§Æ‡•ã‡§® ‡§ú‡§æ‡§≤ ‡§≤‡§æ‡§ó‡§§", "48": "‡§™‡•Ä‡§≤‡•á ‡§ö‡§ø‡§™‡§ö‡§ø‡§™‡•á ‡§ú‡§æ‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó / ‡§è‡§ï‡§°‡§º",
        "49": "‡§™‡•ç‡§∞‡§§‡§ø ‡§™‡•Ä‡§≤‡•á ‡§ö‡§ø‡§™‡§ö‡§ø‡§™‡•á ‡§ú‡§æ‡§≤ ‡§≤‡§æ‡§ó‡§§", "50": "‡§®‡•Ä‡§≤‡•á ‡§ö‡§ø‡§™‡§ö‡§ø‡§™‡•á ‡§ú‡§æ‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó / ‡§è‡§ï‡§°‡§º",
        "51": "‡§™‡•ç‡§∞‡§§‡§ø ‡§®‡•Ä‡§≤‡•á ‡§ö‡§ø‡§™‡§ö‡§ø‡§™‡•á ‡§ú‡§æ‡§≤ ‡§≤‡§æ‡§ó‡§§", "52": "‡§™‡§ï‡•ç‡§∑‡•Ä ‡§™‡§∞‡•ç‡§ö ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó / ‡§è‡§ï‡§°‡§º",
        "53": "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§≤‡§æ‡§ó‡§§/‡§è‡§ï‡§∞", "54": "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡§™‡§æ‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
        "55": "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§µ‡§ø‡§ß‡§ø ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ", "56": "‡§ï‡•ç‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§ï‡•É‡§∑‡§ø ‡§Æ‡§∂‡•Ä‡§®‡§∞‡•Ä ‡§ï‡§ø‡§∞‡§æ‡§è ‡§™‡§∞ ‡§≤‡•Ä ‡§ó‡§à ‡§π‡•à (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "57": "‡§Æ‡§∂‡•Ä‡§®‡§∞‡•Ä ‡§ï‡§ø‡§∞‡§æ‡§è ‡§™‡§∞ ‡§≤‡•á‡§®‡•á ‡§ï‡•Ä ‡§≤‡§æ‡§ó‡§§ (‡§∞‡•Å.))/‡§è‡§ï‡§°‡§º", "58": "‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§∂‡•ç‡§∞‡§Æ ‡§≤‡§æ‡§ó‡§§ ‡§™‡•ç‡§∞‡§§‡§ø ‡§¶‡§ø‡§®",
        "59": "‡§™‡•ç‡§∞‡§µ‡§æ‡§∏‡•Ä ‡§∂‡•ç‡§∞‡§Æ ‡§≤‡§æ‡§ó‡§§ ‡§™‡•ç‡§∞‡§§‡§ø ‡§¶‡§ø‡§®", "60": "‡§¨‡•Å‡§µ‡§æ‡§à ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ/‡§è‡§ï‡§°‡§º",
        "61": "‡§ï‡§ü‡§æ‡§à ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ/‡§è‡§ï‡§∞",
        "62": "‡§ï‡§ü‡§æ‡§à ‡§ï‡§æ ‡§∏‡§Æ‡§Ø (1st, 2nd ‡§î‡§∞ 3rd ‡§™‡§ø‡§ï‡§ø‡§Ç‡§ó) (‡§Æ‡§π‡•Ä‡§®‡§æ)",
        "63": "‡§ñ‡§∞‡§™‡§§‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§ß‡§ø ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ (‡§Æ‡•à‡§®‡•Å‡§Ö‡§≤/‡§Æ‡•à‡§ï‡•á‡§®‡§ø‡§ï‡§≤)", "64": "‡§ñ‡§∞‡§™‡§§‡§µ‡§æ‡§∞ ‡§≤‡§æ‡§ó‡§§/‡§è‡§ï‡§°‡§º",
        "65": "‡§™‡§≤‡§µ‡§æ‡§∞ ‡§≤‡§æ‡§ó‡§§/‡§è‡§ï‡§∞", "66": "‡§ú‡•Å‡§§‡§æ‡§à ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ", "67": "‡§ú‡•Å‡§§‡§æ‡§à ‡§≤‡§æ‡§ó‡§§/‡§è‡§ï‡§°‡§º",
        "68": "‡§≠‡•Ç‡§Æ‡§ø ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§ó‡§§/‡§è‡§ï‡§°‡§º", "69": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§æ‡§™‡§∏‡§æ‡§ö‡§æ ‡§¨‡§ø‡§Ø‡§æ‡§£‡•á ‡§¶‡§∞/‡§è‡§ï‡§∞",
        "70": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§™‡§æ‡§∏ ‡§¨‡§ø‡§Ø‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§ú‡§æ‡§§ (‡§®‡§æ‡§µ)", "71": "‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§¨‡•â‡§∞‡•ç‡§°‡§∞ ‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ",
        "72": "‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Ü‡§Ç‡§§‡§∞‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ", "73": "‡§ï‡§µ‡§∞ ‡§™‡§æ‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ", "74": "‡§ü‡•ç‡§∞‡•à‡§™ ‡§´‡§∏‡§≤‡§æ‡§ö‡•á ‡§®‡§æ‡§µ",
        "75": "‡§Ü‡§ö‡•ç‡§õ‡§æ‡§¶‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)", "76": "‡§Ü‡§ö‡•ç‡§õ‡§æ‡§¶‡§® ‡§ï‡•á ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ (‡§ú‡•à‡§µ-‡§™‡•ç‡§≤‡§æ‡§∏‡•ç‡§ü‡§ø‡§ï/‡§π‡§∞‡§æ/‡§∏‡•Ç‡§ñ‡§æ)",
        "77": "‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡§ø‡§Ø‡§æ‡§Ç ‡§¨‡§∞‡§§‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç",
        "78": "‡§¨‡•Ä‡§ú ‡§ï‡§™‡§æ‡§∏ ‡§ï‡•á ‡§™‡§∞‡§ø‡§µ‡§π‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§∞‡§æ‡§è ‡§™‡§∞ ‡§µ‡§æ‡§π‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "79": "‡§™‡§∞‡§ø‡§µ‡§π‡§® ‡§≤‡§æ‡§ó‡§§ (‡§∞‡•Å.)/‡§¨‡•Ä‡§ú ‡§ï‡§™‡§æ‡§∏ ‡§ï‡§æ ‡§ï‡§ø‡§≤‡•ã", "80": "‡§™‡•ç‡§∞‡§¶‡•Ç‡§∑‡§£/‡§Ö‡§∂‡•Å‡§¶‡•ç‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§ï‡•ã‡§à ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§‡§ø (‡§ï‡§ø‡§≤‡•ã)",
        "81": "‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§ñ‡•ã‡§ú ‡§§‡§Ç‡§§‡•ç‡§∞", "82": "‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§≤‡•á‡§®‡§¶‡•á‡§® ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ (‡§®‡§ï‡§¶/‡§ë‡§®‡§≤‡§æ‡§á‡§®)",
        "83": "‡§¨‡•á‡§ö‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡•á ‡§¶‡§ø‡§®", "84": "‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Ø‡§æ ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§≤‡§æ‡§≠ ‡§ï‡§æ ‡§≤‡§æ‡§≠ ‡§â‡§†‡§æ‡§®‡§æ (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "85": "‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ö‡•Å‡§®‡§æ ‡§ó‡§Ø‡§æ (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)", "86": "‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§ï‡•Ä ‡§≤‡§æ‡§ó‡§§ ‡§™‡•ç‡§∞‡§§‡§ø ‡§è‡§ï‡§°‡§º",
        "87": "‡§ï‡•á‡§∏‡•Ä‡§∏‡•Ä ‡§π‡•à (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)", "88": "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§¨‡•à‡§Ç‡§ï ‡§ñ‡§æ‡§§‡§æ ‡§π‡•à (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "89": "‡§´‡§∏‡§≤ ‡§∞‡•ã‡§ü‡•á‡§∂‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)", "90": "‡§∞‡•ã‡§ü‡•á‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§´‡§∏‡§≤‡•á‡§Ç",
        "91": "‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§ú‡§≤ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "92": "‡§™‡§Ç‡§™ ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ (‡§è‡§ö‡§™‡•Ä ‡§Æ‡•á‡§Ç)", "93": "‡§¨‡§´‡§∞ ‡§ú‡•ã‡§® ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡§®‡§æ (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "94": "‡§´‡§∏‡§≤ ‡§Ö‡§µ‡§∂‡•á‡§∑ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó (‡§à‡§Ç‡§ß‡§®/‡§™‡§∂‡•Å ‡§ö‡§æ‡§∞‡§æ/‡§¨‡§æ‡§Ø‡•ã‡§ö‡§æ‡§∞/‡§á‡§®-‡§∏‡•Ä‡§ü‡•Ç ‡§ï‡§Ç‡§™‡•ã‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó/‡§ú‡§≤‡§æ‡§®‡§æ)",
        "95": "‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï‡•ã‡§Ç ‡§ï‡•ã ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ (‡§∞‡•ã‡§ñ/‡§ë‡§®‡§≤‡§æ‡§á‡§®)",
        "96": "‡§™‡•Å‡§∞‡•Å‡§∑ ‡§î‡§∞ ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§µ‡•á‡§§‡§® ‡§Ö‡§Ç‡§§‡§∞ (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "97": "‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§∂‡•ç‡§∞‡§Æ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "98": "‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ-‡§ï‡§ø‡§ü/‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§ï‡•Ä ‡§ï‡•ã‡§à ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ",
        "99": "‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§∂‡•ç‡§∞‡§Ø ‡§î‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡•á‡§Ø‡§ú‡§≤ ‡§ï‡§æ ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§æ‡§µ‡§ß‡§æ‡§®",
        "100": "‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∂‡•å‡§ö‡§æ‡§≤‡§Ø ‡§ï‡§æ ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§æ‡§µ‡§ß‡§æ‡§®",
        "101": "‡§ï‡•É‡§∑‡§ø ‡§ï‡§æ‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç (‡§Æ‡§π‡§ø‡§≤‡§æ‡§ì‡§Ç) ‡§ï‡•ã ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡§®‡§æ",
        "102": "‡§ï‡•ã‡§à ‡§∏‡§æ‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§ú‡§≤ ‡§∏‡§Ç‡§ö‡§Ø‡§® ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "103": "‡§Æ‡•É‡§¶‡§æ ‡§®‡§Æ‡•Ä ‡§Æ‡•Ä‡§ü‡§∞ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó (‡§π‡§æ‡§Å/‡§®‡§æ‡§π‡•Ä)",
        "surveyor_name_key": "‡§∏‡§∞‡•ç‡§µ‡•á‡§Ø‡§∞ ‡§ï‡§æ ‡§®‡§æ‡§Æ"
    },
    "Marathi": {
        "1": "‡§∂‡•á‡§§‡§ï‡§∞‡•Ä ‡§ü‡•ç‡§∞‡•á‡§∏‡§®‡•á‡§ü ‡§ï‡•ã‡§°", "2": "‡§∂‡•á‡§§‡§ï‡§±‡•ç‡§Ø‡§æ‡§ö‡•á ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§®‡§æ‡§µ", "3": "‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤ ‡§®‡§Ç‡§¨‡§∞", "4": "‡§≤‡§ø‡§Ç‡§ó",
        "5": "‡§â‡§ö‡•ç‡§ö‡§§‡§Æ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£", "6": "‡§ó‡§æ‡§µ", "7": "‡§§‡§æ‡§≤‡•Å‡§ï‡§æ/‡§¨‡•ç‡§≤‡•â‡§ï", "8": "‡§ú‡§ø‡§≤‡•ç‡§π‡§æ",
        "9": "‡§∞‡§æ‡§ú‡•ç‡§Ø", "10": "‡§™‡§ø‡§®‡§ï‡•ã‡§°", "11": "‡§ò‡§∞‡§æ‡§§‡•Ä‡§≤ ‡§™‡•Å‡§∞‡•Å‡§∑‡§æ‡§Ç‡§ö‡•Ä (‡§™‡•ç‡§∞‡•å‡§¢) ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
        "12": "‡§ò‡§∞‡§æ‡§§‡•Ä‡§≤ ‡§Æ‡§π‡§ø‡§≤‡§æ‡§Ç‡§ö‡•Ä (‡§™‡•ç‡§∞‡•å‡§¢) ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ", "13": "‡§ò‡§∞‡§æ‡§§‡•Ä‡§≤ ‡§Æ‡•Å‡§≤‡•á (<16)",
        "14": "‡§ò‡§∞‡§æ‡§§‡•Ä‡§≤ ‡§è‡§ï‡•Ç‡§£ ‡§∏‡§¶‡§∏‡•ç‡§Ø", "15": "‡§∂‡§æ‡§≥‡•á‡§§ ‡§ú‡§æ‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§Æ‡•Å‡§≤‡§æ‡§Ç‡§ö‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
        "16": "‡§ï‡•Å‡§ü‡•Å‡§Ç‡§¨‡§æ‡§§‡•Ä‡§≤ ‡§ï‡§Æ‡§æ‡§µ‡§§‡•ç‡§Ø‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§æ‡§Ç‡§ö‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ", "17": "‡§è‡§ï‡•Ç‡§£ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•Ä ‡§Æ‡§æ‡§≤‡§ï‡•Ä (‡§è‡§ï‡§∞‡§Æ‡§ß‡•ç‡§Ø‡•á)",
        "18": "‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§™‡•Ä‡§ï", "19": "‡§¶‡•Å‡§Ø‡•ç‡§Ø‡§Æ ‡§™‡§ø‡§ï‡•á", "20": "‡§ó‡•à‡§∞-‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§æ‡§™‡•Ç‡§∏ ‡§ú‡§Æ‡•Ä‡§® (‡§è‡§ï‡§∞‡§Æ‡§ß‡•ç‡§Ø‡•á) (‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏)",
        "21": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§æ‡§™‡•Ç‡§∏ ‡§ú‡§Æ‡•Ä‡§® (‡§è‡§ï‡§∞‡§Æ‡§ß‡•ç‡§Ø‡•á)", "22": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§æ‡§™‡•Ç‡§∏ ‡§≤‡§æ‡§ó‡§µ‡§°‡•Ä‡§™‡§æ‡§∏‡•Ç‡§®‡§ö‡•Ä ‡§µ‡§∞‡•ç‡§∑‡•á (#)",
        "23": "‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ ‡§∏‡•ç‡§•‡§ø‡§§‡•Ä (‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§/IC1..)", "24": "‡§∏‡§ø‡§Ç‡§ö‡§®‡§æ‡§ö‡§æ ‡§∏‡•ç‡§∞‡•ã‡§§",
        "25": "‡§ï‡•É‡§∑‡§ø ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§è‡§ï‡§∞)", "26": "‡§ú‡§®‡§æ‡§µ‡§∞‡§æ‡§Ç‡§ö‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ (‡§ó‡§æ‡§Ø ‡§Ü‡§£‡§ø ‡§Æ‡•ç‡§π‡•à‡§∏)",
        "27": "‡§™‡§ø‡§£‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡•á ‡§∏‡•ç‡§∞‡•ã‡§§", "28": "‡§™‡§∏‡§Ç‡§§‡•Ä‡§ö‡•á ‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ (‡§è‡§ó‡•ç‡§∞‡•Ä‡§ó‡•á‡§ü‡§∞/‡§∏‡•Å‡§Æ‡§ø‡§Ç‡§ü‡§∞/‡§è‡§™‡•Ä‡§è‡§Æ‡§∏‡•Ä/‡§á‡§§‡§∞ ‡§ú‡§ø‡§®)",
        "29": "‡§ï‡§æ‡§™‡§£‡•Ä ‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§ï‡§æ‡§™‡§∏‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§æ‡§†‡§µ‡§£‡•Å‡§ï‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§ú‡§æ‡§ó‡§æ ‡§Ü‡§π‡•á (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)", "30": "‡§ï‡•ã‡§£‡§§‡§æ‡§π‡•Ä ‡§ï‡•É‡§∑‡•Ä ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§§‡•ã (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "31": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§æ‡§™‡§∏‡§æ‡§∏‡§æ‡§†‡•Ä ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä‡§Ç‡§µ‡§∞ ‡§ï‡•ã‡§£‡§§‡•á‡§π‡•Ä ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§Æ‡§ø‡§≥‡§æ‡§≤‡•á ‡§Ü‡§π‡•á ‡§ï‡§æ?",
        "32": "‡§è‡§´‡§™‡•Ä‡§ì/‡§è‡§´‡§™‡•Ä‡§∏‡•Ä/‡§è‡§∏‡§è‡§ö‡§ú‡•Ä ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§§‡§æ", "33": "‡§®‡•ã‡§Ç‡§¶ ‡§†‡•á‡§µ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§°‡§æ‡§Ø‡§∞‡•Ä ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§†‡•á‡§µ‡§£‡•á (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "34": "‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§ò‡§∞‡§ó‡•Å‡§§‡•Ä ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® (‡§∞‡•Å‡§™‡§Ø‡§æ‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á)", "35": "‡§â‡§§‡•ç‡§™‡§®‡•ç‡§®‡§æ‡§ö‡§æ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§∏‡•ç‡§∞‡•ã‡§§",
        "36": "‡§â‡§§‡•ç‡§™‡§®‡•ç‡§®‡§æ‡§ö‡§æ ‡§¶‡•Å‡§Ø‡•ç‡§Ø‡§Æ ‡§∏‡•ç‡§∞‡•ã‡§§", "37": "‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§∏‡•ç‡§∞‡•ã‡§§‡§æ‡§ï‡§°‡•Ç‡§® ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® (‡§∞‡•Å.)",
        "38": "‡§™‡•ç‡§∞‡§§‡§ø ‡§µ‡§∞‡•ç‡§∑/‡§è‡§ï‡§∞ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ ‡§ñ‡§∞‡•ç‡§ö", "39": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§æ‡§™‡•Ç‡§∏/‡§è‡§ï‡§∞‡§ö‡•á ‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® (‡§ï‡§ø‡§≤‡•ã)",
        "40": "‡§™‡•ç‡§∞‡§§‡§ø ‡§è‡§ï‡§∞ ‡§≤‡§æ‡§ó‡§µ‡§°‡•Ä‡§ö‡§æ ‡§ñ‡§∞‡•ç‡§ö (‡§∞‡•Å.)", "41": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§æ‡§™‡§∏‡§æ‡§ö‡•Ä ‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•á‡§≤‡•á‡§≤‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ (‡§ï‡§ø‡§≤‡•ã‡§Æ‡§ß‡•ç‡§Ø‡•á)",
        "42": "‡§™‡•ç‡§∞‡§§‡§ø ‡§ï‡§ø‡§≤‡•ã ‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡§ø‡§Ç‡§Æ‡§§ (‡§∞‡•Å.)", "43": "‡§ú‡•à‡§µ-‡§á‡§®‡§™‡•Å‡§ü‡§∏‡§æ‡§†‡•Ä ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ñ‡§∞‡•ç‡§ö",
        "44": "‡§ï‡•Ä‡§° ‡§Ü‡§£‡§ø ‡§∞‡•ã‡§ó ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ‡§∏‡§æ‡§†‡•Ä ‡§µ‡§æ‡§™‡§∞‡§≤‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§ú‡•à‡§µ-‡§á‡§®‡§™‡•Å‡§ü‡§ö‡•á ‡§®‡§æ‡§µ",
        "45": "‡§µ‡§æ‡§™‡§∞‡§≤‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§ú‡•à‡§µ-‡§ñ‡§§/‡§ñ‡§æ‡§¶‡§ö‡•á ‡§®‡§æ‡§µ", "46": "‡§´‡•á‡§∞‡•ã‡§Æ‡•ã‡§® ‡§∏‡§æ‡§™‡§≥‡•á ‡§µ‡§æ‡§™‡§∞‡§≤‡•á / ‡§è‡§ï‡§∞",
        "47": "‡§™‡•ç‡§∞‡§§‡§ø ‡§´‡•á‡§∞‡•ã‡§Æ‡•ã‡§® ‡§∏‡§æ‡§™‡§≥‡§æ ‡§ñ‡§∞‡•ç‡§ö", "48": "‡§™‡§ø‡§µ‡§≥‡•á ‡§ö‡§ø‡§ï‡§ü ‡§∏‡§æ‡§™‡§≥‡•á ‡§µ‡§æ‡§™‡§∞‡§≤‡•á / ‡§è‡§ï‡§∞",
        "49": "‡§™‡•ç‡§∞‡§§‡§ø ‡§™‡§ø‡§µ‡§≥‡§æ ‡§ö‡§ø‡§ï‡§ü ‡§∏‡§æ‡§™‡§≥‡§æ ‡§ñ‡§∞‡•ç‡§ö", "50": "‡§®‡§ø‡§≥‡•á ‡§ö‡§ø‡§ï‡§ü ‡§∏‡§æ‡§™‡§≥‡•á ‡§µ‡§æ‡§™‡§∞‡§≤‡•á / ‡§è‡§ï‡§∞",
        "51": "‡§™‡•ç‡§∞‡§§‡§ø ‡§®‡§ø‡§≥‡§æ ‡§ö‡§ø‡§ï‡§ü ‡§∏‡§æ‡§™‡§≥‡§æ ‡§ñ‡§∞‡•ç‡§ö", "52": "‡§™‡§ï‡•ç‡§∑‡•Ä ‡§•‡§æ‡§Ç‡§¨‡•á ‡§µ‡§æ‡§™‡§∞‡§≤‡•á / ‡§è‡§ï‡§∞",
        "53": "‡§∏‡§ø‡§Ç‡§ö‡§® ‡§ñ‡§∞‡•ç‡§ö/‡§è‡§ï‡§∞", "54": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§æ‡§™‡§∏‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∏‡§ø‡§Ç‡§ö‡§®‡§æ‡§ö‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
        "55": "‡§µ‡§æ‡§™‡§∞‡§≤‡•á‡§≤‡•Ä ‡§∏‡§ø‡§Ç‡§ö‡§® ‡§™‡§¶‡•ç‡§ß‡§§", "56": "‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§∂‡•á‡§§‡•Ä ‡§Ö‡§µ‡§ú‡§æ‡§∞‡•á ‡§≠‡§æ‡§°‡•ç‡§Ø‡§æ‡§®‡•á ‡§ò‡•á‡§§‡§≤‡•Ä ‡§Ü‡§π‡•á‡§§ (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "57": "‡§Ö‡§µ‡§ú‡§æ‡§∞‡•á ‡§≠‡§æ‡§°‡•ç‡§Ø‡§æ‡§®‡•á ‡§ò‡•á‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§ñ‡§∞‡•ç‡§ö (‡§∞‡•Å.)/‡§è‡§ï‡§∞", "58": "‡§∏‡•ç‡§•‡§æ‡§®‡§ø‡§ï ‡§Æ‡§ú‡•Å‡§∞‡•Ä‡§ö‡§æ ‡§¶‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø ‡§¶‡§ø‡§µ‡§∏",
        "59": "‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞‡§ø‡§§ ‡§Æ‡§ú‡•Å‡§∞‡•Ä‡§ö‡§æ ‡§¶‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø ‡§¶‡§ø‡§µ‡§∏", "60": "‡§µ‡§æ‡§µ‡§£‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§µ‡•á‡§≥‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ï‡§æ‡§Æ‡§ó‡§æ‡§∞‡§æ‡§Ç‡§ö‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ/‡§è‡§ï‡§∞",
        "61": "‡§ï‡§æ‡§™‡§£‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§µ‡•á‡§≥‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ï‡§æ‡§Æ‡§ó‡§æ‡§∞‡§æ‡§Ç‡§ö‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ/‡§è‡§ï‡§∞",
        "62": "‡§ï‡§æ‡§™‡§£‡•Ä‡§ö‡•Ä ‡§µ‡•á‡§≥ (1 ‡§≤‡•Ä, 2 ‡§∞‡•Ä ‡§Ü‡§£‡§ø 3 ‡§∞‡•Ä ‡§®‡§ø‡§µ‡§°) (‡§Æ‡§π‡§ø‡§®‡§æ)",
        "63": "‡§§‡§£ ‡§ï‡§æ‡§¢‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§™‡§¶‡•ç‡§ß‡§§ ‡§µ‡§æ‡§™‡§∞‡§≤‡•Ä (‡§π‡§æ‡§§‡§æ‡§®‡•á/‡§Ø‡§æ‡§Ç‡§§‡•ç‡§∞‡§ø‡§ï)", "64": "‡§§‡§£ ‡§ï‡§æ‡§¢‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§ñ‡§∞‡•ç‡§ö/‡§è‡§ï‡§∞",
        "65": "‡§Ü‡§ö‡•ç‡§õ‡§æ‡§¶‡§® ‡§ñ‡§∞‡•ç‡§ö/‡§è‡§ï‡§∞", "66": "‡§ï‡§ø‡§§‡•Ä ‡§µ‡•á‡§≥‡§æ ‡§®‡§æ‡§Ç‡§ó‡§∞‡§£‡•Ä ‡§ï‡•á‡§≤‡•Ä", "67": "‡§®‡§æ‡§Ç‡§ó‡§∞‡§£‡•Ä ‡§ñ‡§∞‡•ç‡§ö/‡§è‡§ï‡§∞",
        "68": "‡§ú‡§Æ‡•Ä‡§® ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§ñ‡§∞‡•ç‡§ö/‡§è‡§ï‡§∞", "69": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§¨‡§ø‡§Ø‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§¶‡§∞/‡§è‡§ï‡§∞",
        "70": "‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§æ‡§™‡§∏‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§¨‡§ø‡§Ø‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§ú‡§æ‡§§ (‡§®‡§æ‡§µ)", "71": "‡§µ‡§æ‡§™‡§∞‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§¨‡•â‡§∞‡•ç‡§°‡§∞ ‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ",
        "72": "‡§µ‡§æ‡§™‡§∞‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Ü‡§Ç‡§§‡§∞‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ", "73": "‡§ï‡§µ‡§∞ ‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ", "74": "‡§ü‡•ç‡§∞‡•Ö‡§™ ‡§™‡§ø‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ",
        "75": "‡§Æ‡§≤‡•ç‡§ö‡§ø‡§Ç‡§ó ‡§µ‡§æ‡§™‡§∞‡§≤‡•á (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)", "76": "‡§µ‡§æ‡§™‡§∞‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Æ‡§≤‡•ç‡§ö‡§ø‡§Ç‡§ó‡§ö‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ (‡§ú‡•à‡§µ-‡§™‡•ç‡§≤‡§æ‡§∏‡•ç‡§ü‡§ø‡§ï/‡§π‡§ø‡§∞‡§µ‡§æ/‡§ï‡•ã‡§∞‡§°‡§æ)",
        "77": "‡§∏‡§æ‡§†‡§µ‡§£‡•Å‡§ï‡•Ä‡§¶‡§∞‡§Æ‡•ç‡§Ø‡§æ‡§® ‡§ï‡•ã‡§£‡§§‡•Ä ‡§ñ‡§¨‡§∞‡§¶‡§æ‡§∞‡•Ä ‡§ò‡•á‡§§‡§≤‡•Ä ‡§ú‡§æ‡§§‡•á",
        "78": "‡§¨‡•Ä‡§ú ‡§ï‡§™‡§æ‡§∏‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§µ‡§æ‡§π‡§§‡•Å‡§ï‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§≠‡§æ‡§°‡•ç‡§Ø‡§æ‡§ö‡•á ‡§µ‡§æ‡§π‡§® ‡§µ‡§æ‡§™‡§∞‡§≤‡•á (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "79": "‡§µ‡§æ‡§π‡§§‡•Ç‡§ï ‡§ñ‡§∞‡•ç‡§ö (‡§∞‡•Å.)/‡§¨‡•Ä‡§ú ‡§ï‡§™‡§æ‡§∏‡§æ‡§ö‡•á ‡§ï‡§ø‡§≤‡•ã", "80": "‡§™‡•ç‡§∞‡§¶‡•Ç‡§∑‡§£/‡§Ö‡§∂‡•Å‡§¶‡•ç‡§ß‡§§‡•á‡§Æ‡•Å‡§≥‡•á ‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§®‡§æ‡§ï‡§æ‡§∞‡§≤‡•Ä (‡§ï‡§ø‡§≤‡•ã)",
        "81": "‡§ï‡§ø‡§Ç‡§Æ‡§§ ‡§∂‡•ã‡§ß‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£‡§æ", "82": "‡§ö‡•Å‡§ï‡§µ‡§£‡•Ä ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ (‡§∞‡•ã‡§ñ/‡§ë‡§®‡§≤‡§æ‡§á‡§®)",
        "83": "‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§®‡§Ç‡§§‡§∞ ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü‡§ö‡•á ‡§¶‡§ø‡§µ‡§∏", "84": "‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ‡§π‡•Ä ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§Ö‡§®‡•Å‡§¶‡§æ‡§®‡§æ‡§ö‡§æ ‡§≤‡§æ‡§≠ ‡§ò‡•á‡§£‡•á (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "85": "‡§™‡•Ä‡§ï ‡§µ‡§ø‡§Æ‡§æ ‡§ò‡•á‡§§‡§≤‡§æ (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)", "86": "‡§™‡•ç‡§∞‡§§‡§ø ‡§è‡§ï‡§∞ ‡§™‡•Ä‡§ï ‡§µ‡§ø‡§Æ‡§æ ‡§ñ‡§∞‡•ç‡§ö",
        "87": "‡§ï‡•á‡§∏‡•Ä‡§∏‡•Ä ‡§Ü‡§π‡•á (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)", "88": "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§¨‡§Å‡§ï ‡§ñ‡§æ‡§§‡•á ‡§Ü‡§π‡•á (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "89": "‡§™‡•Ä‡§ï ‡§™‡§∞‡§ø‡§≠‡•ç‡§∞‡§Æ‡§£ ‡§µ‡§æ‡§™‡§∞‡§≤‡•á (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)", "90": "‡§™‡§∞‡§ø‡§≠‡•ç‡§∞‡§Æ‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§µ‡§æ‡§™‡§∞‡§≤‡•á‡§≤‡•Ä ‡§™‡§ø‡§ï‡•á",
        "91": "‡§ï‡•ã‡§£‡§§‡•á‡§π‡•Ä ‡§ú‡§≤ ‡§ü‡•ç‡§∞‡•Ö‡§ï‡§ø‡§Ç‡§ó ‡§â‡§™‡§ï‡§∞‡§£ ‡§µ‡§æ‡§™‡§∞‡§§ ‡§Ü‡§π‡§æ‡§§ (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "92": "‡§™‡§Ç‡§™‡§æ‡§ö‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ (‡§è‡§ö‡§™‡•Ä ‡§Æ‡§ß‡•ç‡§Ø‡•á)", "93": "‡§¨‡§´‡§∞ ‡§ù‡•ã‡§® ‡§∞‡§æ‡§ñ‡§£‡•á (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "94": "‡§™‡•Ä‡§ï ‡§Ö‡§µ‡§∂‡•á‡§∑‡§æ‡§Ç‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ (‡§á‡§Ç‡§ß‡§®/‡§ú‡§®‡§æ‡§µ‡§∞‡§æ‡§Ç‡§ö‡•á ‡§ñ‡§æ‡§¶‡•ç‡§Ø/‡§¨‡§æ‡§Ø‡•ã‡§ö‡§æ‡§∞/‡§á‡§®-‡§∏‡•Ä‡§ü‡•Ç ‡§ï‡§Ç‡§™‡•ã‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó/‡§ú‡§æ‡§≥‡§£‡•á)",
        "95": "‡§ï‡§æ‡§Æ‡§ó‡§æ‡§∞‡§æ‡§Ç‡§®‡§æ ‡§¶‡•á‡§Ø‡§ï‡§æ‡§ö‡•Ä ‡§™‡§¶‡•ç‡§ß‡§§ (‡§∞‡•ã‡§ñ/‡§ë‡§®‡§≤‡§æ‡§á‡§®)",
        "96": "‡§™‡•Å‡§∞‡•Å‡§∑ ‡§Ü‡§£‡§ø ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§ï‡§æ‡§Æ‡§ó‡§æ‡§∞‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§ï‡•ã‡§£‡§§‡§æ‡§π‡•Ä ‡§µ‡•á‡§§‡§® ‡§§‡§´‡§æ‡§µ‡§§ (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "97": "‡§ï‡•ã‡§£‡§§‡•á‡§π‡•Ä ‡§ï‡§æ‡§Æ‡§ó‡§æ‡§∞ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§µ‡§æ‡§™‡§∞‡§§ ‡§Ü‡§π‡§æ‡§§ (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "98": "‡§ï‡§æ‡§Æ‡§ó‡§æ‡§∞‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ-‡§ï‡§ø‡§ü/‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§â‡§™‡§ö‡§æ‡§∞‡§æ‡§Ç‡§ö‡•Ä ‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ",
        "99": "‡§ï‡§æ‡§Æ‡§ó‡§æ‡§∞‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§®‡§ø‡§µ‡§æ‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡§ø‡§£‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§§‡§∞‡§§‡•Ç‡§¶",
        "100": "‡§ï‡§æ‡§Æ‡§ó‡§æ‡§∞‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§∂‡•å‡§ö‡§æ‡§≤‡§Ø‡§æ‡§ö‡•Ä ‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§§‡§∞‡§§‡•Ç‡§¶",
        "101": "‡§ï‡•É‡§∑‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ï‡•Å‡§ü‡•Å‡§Ç‡§¨‡§æ‡§§‡•Ä‡§≤ ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§æ‡§Ç‡§®‡§æ (‡§Æ‡§π‡§ø‡§≤‡§æ‡§Ç‡§®‡§æ) ‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§ï‡§∞‡§£‡•á",
        "102": "‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§∏‡§æ‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§ú‡§≤ ‡§∏‡§Ç‡§ö‡§Ø‡§® ‡§∞‡§ö‡§®‡§æ (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "103": "‡§Æ‡§æ‡§§‡•Ä‡§§‡•Ä‡§≤ ‡§ì‡§≤‡§æ‡§µ‡§æ ‡§Æ‡•Ä‡§ü‡§∞‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)",
        "surveyor_name_key": "‡§∏‡§∞‡•ç‡§µ‡•á‡§Ø‡§∞‡§ö‡•á ‡§®‡§æ‡§µ"
    },
    "Gujarati": {
        "1": "‡™ñ‡´á‡™°‡´Ç‡™§ ‡™ü‡´ç‡™∞‡´á‡™∏‡™®‡´á‡™ü ‡™ï‡´ã‡™°", "2": "‡™ñ‡´á‡™°‡´Ç‡™§‡™®‡´Å‡™Ç ‡™™‡´Ç‡™∞‡´Å‡™Ç ‡™®‡™æ‡™Æ", "3": "‡™Æ‡´ã‡™¨‡™æ‡™á‡™≤ ‡™®‡™Ç‡™¨‡™∞", "4": "‡™≤‡™ø‡™Ç‡™ó",
        "5": "‡™ï‡´á‡™ü‡™≤‡´ã ‡™Ö‡™≠‡´ç‡™Ø‡™æ‡™∏ ‡™ï‡™∞‡´á‡™≤‡´ã ‡™õ‡´á", "6": "‡™ó‡™æ‡™Æ", "7": "‡™§‡™æ‡™≤‡´Å‡™ï‡´ã/‡™¨‡´ç‡™≤‡´ã‡™ï", "8": "‡™ú‡™ø‡™≤‡´ç‡™≤‡´ã",
        "9": "‡™∞‡™æ‡™ú‡´ç‡™Ø", "10": "‡™™‡™ø‡™®‡™ï‡´ã‡™°", "11": "‡™ò‡™∞‡™Æ‡™æ‡™Ç ‡™™‡´Å‡™∞‡´Å‡™∑‡´ã‡™®‡´Ä (‡™™‡´Å‡™ñ‡´ç‡™§) ‡™∏‡™Ç‡™ñ‡´ç‡™Ø‡™æ",
        "12": "‡™ò‡™∞‡™Æ‡™æ‡™Ç ‡™Æ‡™π‡™ø‡™≤‡™æ‡™ì‡™®‡´Ä (‡™™‡´Å‡™ñ‡´ç‡™§) ‡™∏‡™Ç‡™ñ‡´ç‡™Ø‡™æ", "13": "‡™ò‡™∞‡™Æ‡™æ ‡™¨‡™æ‡™≥‡™ï‡´ã‡™®‡´Ä ‡™∏‡™Ç‡™ñ‡´ç‡™Ø‡™æ (‡´ß‡´¨ ‡™•‡´Ä ‡™ì‡™õ‡´Ä ‡™â‡™Æ‡™∞‡™®‡™æ )",
        "14": "‡™™‡™∞‡™ø‡™µ‡™æ‡™∞‡™®‡™æ ‡™ï‡´Å‡™≤ ‡™∏‡™≠‡´ç‡™Ø‡´ã", "15": "‡™∂‡™æ‡™≥‡™æ‡™è ‡™ú‡™§‡™æ ‡™¨‡™æ‡™≥‡™ï‡´ã‡™®‡´Ä ‡™∏‡™Ç‡™ñ‡´ç‡™Ø‡™æ",
        "16": "‡™™‡™∞‡™ø‡™µ‡™æ‡™∞‡™Æ‡™æ‡™Ç ‡™ï‡™Æ‡™æ‡™§‡™æ ‡™∏‡™≠‡´ç‡™Ø‡™®‡´Ä ‡™∏‡™Ç‡™ñ‡´ç‡™Ø‡™æ", "17": "‡™ï‡´Å‡™≤ ‡™ú‡™Æ‡´Ä‡™® ‡™ß‡™æ‡™∞‡™£ (‡™è‡™ï‡™∞‡™Æ‡™æ‡™Ç)",
        "18": "‡™Æ‡´Å‡™ñ‡´ç‡™Ø ‡™™‡™æ‡™ï", "19": "‡™ó‡´å‡™£ ‡™™‡™æ‡™ï", "20": "‡™¨‡™ø‡™®-‡™ì‡™∞‡´ç‡™ó‡´á‡™®‡™ø‡™ï ‡™ï‡™™‡™æ‡™∏‡™®‡´Ä ‡™ú‡™Æ‡´Ä‡™® (‡™è‡™ï‡™∞‡™Æ‡™æ‡™Ç)",
        "21": "‡™ì‡™∞‡´ç‡™ó‡´á‡™®‡™ø‡™ï ‡™ï‡™™‡™æ‡™∏‡™®‡´Ä ‡™ú‡™Æ‡´Ä‡™® (‡™è‡™ï‡™∞‡™Æ‡™æ‡™Ç)", "22": "‡™ì‡™∞‡´ç‡™ó‡™®‡´Ä‡™ï ‡™ï‡™™‡™æ‡™∏‡™®‡´Ä ‡™ñ‡´á‡™§‡´Ä ‡™ï‡´á‡™ü‡™≤‡™æ ‡™µ‡™∞‡´ç‡™∑‡™•‡´Ä ‡™ï‡™∞‡´ã ‡™õ‡´ã",
        "23": "‡™∏‡™∞‡´ç‡™ü‡™ø‡™´‡™ø‡™ï‡´á‡™∏‡™® ‡™∏‡´ç‡™ü‡´á‡™ü‡™∏ (‡™∏‡™∞‡´ç‡™ü‡™ø‡™´‡™æ‡™á‡™°/IC-1,2,3)", "24": "‡™∏‡™ø‡™Ç‡™ö‡™æ‡™à‡™®‡´ã ‡™∏‡´ç‡™§‡´ç‡™∞‡´ã‡™§",
        "25": "‡™ñ‡´á‡™§‡´Ä‡™≤‡™æ‡™Ø‡™ï ‡™µ‡™ø‡™∏‡´ç‡™§‡™æ‡™∞ (‡™è‡™ï‡™∞)", "26": "‡™¢‡´ã‡™∞‡™®‡´Ä ‡™∏‡™Ç‡™ñ‡´ç‡™Ø‡™æ (‡™ó‡™æ‡™Ø ‡™Ö‡™®‡´á ‡™≠‡´á‡™Ç‡™∏)",
        "27": "‡™™‡´Ä‡™µ‡™æ‡™®‡™æ ‡™™‡™æ‡™£‡´Ä‡™®‡´ã ‡™∏‡´ç‡™§‡´ç‡™∞‡´ã‡™§", "28": "‡™™‡™∏‡™Ç‡™¶‡™ó‡´Ä‡™®‡´Å‡™Ç ‡™µ‡´á‡™ö‡™æ‡™£ ‡™∏‡´ç‡™•‡™≥ (‡™è‡™ó‡´ç‡™∞‡´Ä‡™ó‡´á‡™ü‡™∞/‡™∏‡´Å‡™Æ‡™ø‡™®‡´ç‡™ü‡™∞/‡™è‡™™‡´Ä‡™è‡™Æ‡™∏‡´Ä/‡™Ö‡™®‡´ç‡™Ø ‡™ú‡´Ä‡™®)",
        "29": "‡™µ‡´Ä‡™£‡´Ä ‡™ï‡™∞‡´á‡™≤‡™æ ‡™ï‡™™‡™æ‡™∏‡™®‡™æ ‡™∏‡™Ç‡™ó‡´ç‡™∞‡™π ‡™Æ‡™æ‡™ü‡´á ‡™ú‡™ó‡´Ä‡™Ø‡™æ ‡™õ‡´á", "30": "‡™ï‡´ã‡™à ‡™™‡™£ ‡™ñ‡´á‡™§‡´Ä ‡™∏‡™Ç‡™¨‡™ß‡™ø‡™§ ‡™∏‡™≤‡™æ‡™π ‡™Æ‡™≥‡´á ‡™õ‡´á",
        "31": "‡™∂‡´Å‡™Ç ‡™ì‡™∞‡´ç‡™ó‡´á‡™®‡™ø‡™ï ‡™ï‡™™‡™æ‡™∏ ‡™Æ‡™æ‡™ü‡´á‡™®‡´Ä ‡™∂‡´ç‡™∞‡´á‡™∑‡´ç‡™† ‡™™‡™¶‡´ç‡™ß‡™§‡™ø ‡™™‡™∞ ‡™ï‡´ã‡™à ‡™§‡™æ‡™≤‡´Ä‡™Æ ‡™Æ‡™≥‡´Ä ‡™õ‡´á",
        "32": "‡™è‡™´‡™™‡´Ä‡™ì/‡™è‡™´‡™™‡´Ä‡™∏‡´Ä/‡™è‡™∏‡™è‡™ö‡™ú‡´Ä‡™Æ‡™æ‡™Ç ‡™∏‡™≠‡´ç‡™Ø‡™™‡™¶ ‡™ß‡™∞‡™æ‡™µ‡´ã ‡™õ‡´ã", "33": "‡™∞‡´á‡™ï‡´ã‡™∞‡´ç‡™° ‡™∞‡™æ‡™ñ‡™µ‡™æ ‡™Æ‡™æ‡™ü‡´á ‡™ï‡´ã‡™à ‡™°‡™æ‡™Ø‡™∞‡´Ä ‡™Ö‡™•‡™µ‡™æ ‡™∞‡™ú‡™ø‡™∏‡´ç‡™ü‡™∞ ‡™ú‡™æ‡™≥‡™µ‡´ã ‡™õ‡´ã",
        "34": "‡™µ‡™æ‡™∞‡´ç‡™∑‡™ø‡™ï ‡™ò‡™∞‡™ó‡™•‡´ç‡™•‡´Å ‡™Ü‡™µ‡™ï (‡™∞‡´Ç‡™™‡™ø‡™Ø‡™æ‡™Æ‡™æ‡™Ç)", "35": "‡™Ü‡™µ‡™ï‡™®‡´ã ‡™™‡´ç‡™∞‡™æ‡™•‡™Æ‡™ø‡™ï ‡™∏‡´ç‡™§‡´ç‡™∞‡´ã‡™§",
        "36": "‡™Ü‡™µ‡™ï‡™®‡´ã ‡™ó‡´å‡™£ ‡™∏‡´ç‡™§‡´ç‡™∞‡´ã‡™§", "37": "‡™™‡´ç‡™∞‡™æ‡™•‡™Æ‡™ø‡™ï ‡™∏‡´ç‡™§‡´ç‡™∞‡´ã‡™§‡™Æ‡™æ‡™Ç‡™•‡´Ä ‡™Ü‡™µ‡™ï (‡™∞‡´Ç.)",
        "38": "‡™∏‡™∞‡´ç‡™ü‡™ø‡™´‡™ø‡™ï‡´á‡™∏‡™® ‡™ñ‡™∞‡´ç‡™ö ‡™™‡´ç‡™∞‡™§‡™ø ‡™µ‡™∞‡´ç‡™∑/‡™è‡™ï‡™∞", "39": "‡™ì‡™∞‡´ç‡™ó‡™®‡´Ä‡™ï ‡™ï‡™™‡™æ‡™∏‡™®‡´Å‡™Ç ‡™∏‡™∞‡´á‡™∞‡™æ‡™∂ ‡™â‡™§‡´ç‡™™‡™æ‡™¶‡™® (‡™ï‡™ø‡™≤‡´ã/‡™è‡™ï‡™∞)",
        "40": "‡™ñ‡´á‡™§‡´Ä‡™®‡´ã ‡™ñ‡™∞‡´ç‡™ö (‡™∞‡´Ç‡™™‡´Ä‡™Ø‡™æ/‡™è‡™ï‡™∞)", "41": "‡™ì‡™∞‡´ç‡™ó‡´á‡™®‡™ø‡™ï ‡™ï‡™™‡™æ‡™∏‡™®‡´ã ‡™µ‡´á‡™ö‡™æ‡™£ ‡™ï‡™∞‡´á‡™≤‡´ã ‡™ú‡™•‡´ç‡™•‡´ã (‡™ï‡™ø‡™≤‡´ã‡™Æ‡™æ‡™Ç)",
        "42": "‡™µ‡´á‡™ö‡™æ‡™£ ‡™ï‡™ø‡™Ç‡™Æ‡™§ ‡™™‡´ç‡™∞‡™§‡™ø ‡™ï‡™ø‡™≤‡´ã (‡™∞‡´Ç.)", "43": "‡™¨‡™æ‡™Ø‡´ã-‡™á‡™®‡™™‡´Å‡™ü‡´ç‡™∏ ‡™Æ‡™æ‡™ü‡´á ‡™∏‡™æ‡™Æ‡™ó‡´ç‡™∞‡´Ä ‡™ñ‡™∞‡´ç‡™ö",
        "44": "‡™ú‡™Ç‡™§‡´Å ‡™Ö‡™®‡´á ‡™∞‡´ã‡™ó ‡™µ‡´ç‡™Ø‡™µ‡™∏‡´ç‡™•‡™æ‡™™‡™® ‡™Æ‡™æ‡™ü‡´á ‡™µ‡™™‡™∞‡™æ‡™§‡™æ ‡™¨‡™æ‡™Ø‡´ã-‡™á‡™®‡™™‡´Å‡™ü‡™®‡´Å‡™Ç ‡™®‡™æ‡™Æ",
        "45": "‡™µ‡™™‡™∞‡™æ‡™§‡™æ ‡™¨‡™æ‡™Ø‡´ã-‡™ñ‡™§/‡™ñ‡™æ‡™¶‡™®‡´Å‡™Ç ‡™®‡™æ‡™Æ", "46": "‡™´‡´á‡™∞‡´ã‡™Æ‡´ã‡™® ‡™ü‡´ç‡™∞‡´á‡™™‡™®‡´ã ‡™â‡™™‡™Ø‡´ã‡™ó / ‡™è‡™ï‡™∞",
        "47": "‡™ñ‡™∞‡´ç‡™ö ‡™™‡´ç‡™∞‡™§‡™ø ‡™´‡´á‡™∞‡´ã‡™Æ‡´ã‡™® ‡™ü‡´ç‡™∞‡´á‡™™", "48": "‡™™‡´Ä‡™≥‡™æ ‡™∏‡´ç‡™ü‡´Ä‡™ï‡´Ä ‡™ü‡´ç‡™∞‡´á‡™™‡™®‡´ã ‡™â‡™™‡™Ø‡´ã‡™ó / ‡™è‡™ï‡™∞",
        "49": "‡™ñ‡™∞‡´ç‡™ö ‡™™‡´ç‡™∞‡™§‡™ø ‡™™‡´Ä‡™≥‡´ã ‡™∏‡´ç‡™ü‡´Ä‡™ï‡´Ä ‡™ü‡´ç‡™∞‡´á‡™™", "50": "‡™µ‡™æ‡™¶‡™≥‡´Ä ‡™∏‡´ç‡™ü‡´Ä‡™ï‡´Ä ‡™ü‡´ç‡™∞‡´á‡™™‡™®‡´ã ‡™â‡™™‡™Ø‡´ã‡™ó / ‡™è‡™ï‡™∞",
        "51": "‡™ñ‡™∞‡´ç‡™ö ‡™™‡´ç‡™∞‡™§‡™ø ‡™µ‡™æ‡™¶‡™≥‡´Ä ‡™∏‡´ç‡™ü‡´Ä‡™ï‡´Ä ‡™ü‡´ç‡™∞‡´á‡™™", "52": "‡™™‡™ï‡´ç‡™∑‡´Ä ‡™∏‡´ç‡™ü‡´á‡™®‡´ç‡™°‡™®‡´ã ‡™â‡™™‡™Ø‡´ã‡™ó ‡™™‡´ç‡™∞‡™§‡™ø ‡™è‡™ï‡™∞",
        "53": "‡§∏‡§ø‡™Ç‡™ö‡™æ‡™à ‡™ñ‡™∞‡´ç‡™ö/‡™è‡™ï‡™∞", "54": "‡™ì‡™∞‡´ç‡™ó‡´á‡™®‡™ø‡™ï ‡™ï‡™™‡™æ‡™∏ ‡™Æ‡™æ‡™ü‡´á ‡™ú‡™∞‡´Ç‡™∞‡´Ä ‡™∏‡™ø‡™Ç‡™ö‡™æ‡™à‡™®‡´Ä ‡™∏‡™Ç‡™ñ‡´ç‡™Ø‡™æ",
        "55": "‡™µ‡™™‡™∞‡™æ‡™Ø‡´á‡™≤‡´Ä ‡™∏‡™ø‡™Ç‡™ö‡™æ‡™à ‡™™‡™¶‡´ç‡™ß‡™§‡™ø", "56": "‡™ï‡´ã‡™à‡™™‡™£ ‡™ñ‡´á‡™§‡´Ä ‡™Æ‡™∂‡´Ä‡™®‡™∞‡´Ä ‡™≠‡™æ‡™°‡´á ‡™≤‡´Ä‡™ß‡´Ä ‡™õ‡´á (‡™π‡™æ/‡™®‡™æ)",
        "57": "‡™Æ‡™∂‡´Ä‡™®‡™∞‡´Ä ‡™≠‡™æ‡™°‡´á ‡™≤‡´á‡™µ‡™æ‡™®‡´ã ‡™ñ‡™∞‡´ç‡™ö (‡™∞‡´Ç.)/‡™è‡™ï‡™∞", "58": "‡™∏‡´ç‡™•‡™æ‡™®‡™ø‡™ï ‡™Æ‡™ú‡´Ç‡™∞‡´Ä ‡™ñ‡™∞‡´ç‡™ö ‡™™‡´ç‡™∞‡™§‡™ø ‡™¶‡™ø‡™µ‡™∏",
        "59": "‡™∏‡´ç‡™•‡™≥‡™æ‡™Ç‡™§‡™∞‡™ø‡™§ ‡™Æ‡™ú‡´Ç‡™∞‡´Ä ‡™ñ‡™∞‡´ç‡™ö ‡™™‡´ç‡™∞‡™§‡™ø ‡™¶‡™ø‡™µ‡™∏", "60": "‡™µ‡™æ‡™µ‡™£‡´Ä‡™®‡™æ ‡™∏‡™Æ‡™Ø‡´á ‡™ú‡™∞‡´Ç‡™∞‡´Ä ‡™ï‡™æ‡™Æ‡™¶‡™æ‡™∞‡´ã‡™®‡´Ä ‡™∏‡™Ç‡™ñ‡´ç‡™Ø‡™æ/‡™è‡™ï‡™∞",
        "61": "‡™µ‡´Ä‡™£‡´Ä‡™®‡™æ ‡™∏‡™Æ‡™Ø‡´á ‡™ú‡™∞‡´Ç‡™∞‡´Ä ‡™ï‡™æ‡™Æ‡™¶‡™æ‡™∞‡´ã‡™®‡´Ä ‡™∏‡™Ç‡™ñ‡´ç‡™Ø‡™æ/‡™è‡™ï‡™∞",
        "62": "‡™µ‡´Ä‡™£‡´Ä ‡™∏‡™Æ‡™Ø (1 ‡™≤‡´Ä, 2 ‡™ú‡´Ä ‡™Ö‡™®‡´á 3 ‡™ú‡´Ä ‡™µ‡´Ä‡™£‡´Ä‡™®‡´ã ‡™Æ‡™π‡™ø‡™®‡´ã)",
        "63": "‡™®‡™ø‡™Ç‡™¶‡™æ‡™Æ‡™£ ‡™™‡™¶‡´ç‡™ß‡™§‡™ø‡™®‡´ã ‡™™‡´ç‡™∞‡™ï‡™æ‡™∞ (‡™π‡™æ‡™• ‡™µ‡™°‡´á /‡™∏‡™æ‡™ß‡™® ‡™¶‡´ç‡™µ‡™æ‡™∞‡™æ)", "64": "‡™®‡™ø‡™Ç‡™¶‡™æ‡™Æ‡™£ ‡™ñ‡™∞‡´ç‡™ö/‡™è‡™ï‡™∞",
        "65": "‡™Æ‡™≤‡´ç‡™ö‡™ø‡™Ç‡™ó ‡™ñ‡™∞‡´ç‡™ö/‡™è‡™ï‡™∞", "66": "‡™ï‡´á‡™ü‡™≤‡´Ä ‡™µ‡™ñ‡™§ ‡™ñ‡´á‡™° ‡™ï‡™∞‡´ã ‡™õ‡´ã", "67": "‡™ñ‡´á‡™° ‡™ñ‡™∞‡´ç‡™ö/‡™è‡™ï‡™∞",
        "68": "‡™ú‡™Æ‡´Ä‡™® ‡™§‡´à‡™Ø‡™æ‡™∞‡´Ä ‡™ñ‡™∞‡´ç‡™ö/‡™è‡™ï‡™∞", "69": "‡™ì‡™∞‡´ç‡™ó‡™®‡™ø‡™ï‡™Ç ‡™ï‡™™‡™æ‡™∏‡™®‡´ã ‡™¨‡´Ä‡™ú‡™®‡´ã ‡™¶‡™∞/‡™è‡™ï‡™∞",
        "70": "‡™ì‡™∞‡´ç‡™ó‡™®‡™ø‡™ï‡™Ç ‡™ï‡™™‡™æ‡™∏‡™®‡™æ ‡™¨‡´Ä‡™ú‡™®‡´Ä ‡™ú‡™æ‡™§‡™®‡´Å‡™Ç ‡™®‡™æ‡™Æ", "71": "‡™¨‡´ã‡™∞‡´ç‡™°‡™∞ ‡™™‡™æ‡™ï‡™®‡´Å‡™Ç ‡™®‡™æ‡™Æ",
        "72": "‡™Ü‡™Ç‡™§‡™∞‡™™‡™æ‡™ï‡™®‡´Å‡™Ç ‡™®‡™æ‡™Æ", "73": "‡™ï‡™µ‡™∞ ‡™™‡™æ‡™ï‡™®‡´Å‡™Ç ‡™®‡™æ‡™Æ", "74": "‡™ü‡´ç‡™∞‡´á‡™™ ‡™™‡™æ‡™ï‡™®‡´Å‡™Ç ‡™®‡™æ‡™Æ",
        "75": "‡™Æ‡™≤‡´ç‡™ö‡™ø‡™Ç‡™ó ‡™µ‡™æ‡™™‡™∞‡´ã ‡™õ‡´á (‡™π‡™æ/‡™®‡™æ)", "76": "‡™µ‡™™‡™∞‡™æ‡™Ø‡´á‡™≤‡™æ ‡™Æ‡™≤‡´ç‡™ö‡™ø‡™Ç‡™ó‡™®‡´ã ‡™™‡´ç‡™∞‡™ï‡™æ‡™∞ (‡™ú‡´à‡™µ-‡™™‡´ç‡™≤‡™æ‡™∏‡´ç‡™ü‡™ø‡™ï/‡™≤‡´Ä‡™≤‡´ã/‡™∏‡´Ç‡™ï‡´ã)",
        "77": "‡™∏‡™Ç‡™ó‡´ç‡™∞‡™π ‡™¶‡™∞‡™Æ‡™ø‡™Ø‡™æ‡™® ‡™∂‡´Å‡™Ç ‡™∏‡™æ‡™µ‡™ö‡´á‡™§‡´Ä‡™ì ‡™∞‡™æ‡™ñ‡´ã ‡™õ‡´ã",
        "78": "‡™µ‡´Ä‡™£‡´Ä ‡™ï‡™∞‡´á‡™≤‡™æ ‡™ï‡™™‡™æ‡™∏‡™®‡™æ ‡™™‡™∞‡™ø‡™µ‡™π‡™® ‡™Æ‡™æ‡™ü‡´á ‡™≠‡™æ‡™°‡´á ‡™≤‡´Ä‡™ß‡´á‡™≤ ‡™µ‡™æ‡™π‡™® ‡™µ‡™™‡™∞‡™æ‡™Ø ‡™õ‡´á (‡™π‡™æ/‡™®‡™æ)",
        "79": "‡™™‡™∞‡™ø‡™µ‡™π‡™® ‡™ñ‡™∞‡´ç‡™ö ‡™∞‡´Ç‡™™‡™ø‡™Ø‡™æ/‡™ï‡™ø‡™≤‡´ã", "80": "‡™¶‡´Ç‡™∑‡™£/‡™Ö‡™∂‡´Å‡™¶‡´ç‡™ß‡™ø‡™ì‡™®‡´á ‡™ï‡™æ‡™∞‡™£‡´á ‡™ï‡´ã‡™à‡™™‡™£ ‡™ú‡™•‡´ç‡™•‡™æ‡™®‡´ã ‡™Ö‡™∏‡´ç‡™µ‡´Ä‡™ï‡™æ‡™∞ (‡™ï‡™ø‡™≤‡´ã)",
        "81": "‡™ï‡™™‡™æ‡™∏‡™®‡™æ ‡™≠‡™æ‡™µ ‡™ú‡™æ‡™£‡™µ‡™æ‡™®‡´Ä ‡™∞‡´Ä‡™§", "82": "‡™ö‡´Å‡™ï‡™µ‡™£‡´Ä ‡™µ‡´ç‡™Ø‡™µ‡™π‡™æ‡™∞‡™®‡´ã ‡™™‡´ç‡™∞‡™ï‡™æ‡™∞ (‡™∞‡´ã‡™ï‡™°‡™æ/‡™ì‡™®‡™≤‡™æ‡™á‡™®)",
        "83": "‡™µ‡´á‡™ö‡™æ‡™£ ‡™ï‡™∞‡´ç‡™Ø‡™æ ‡™™‡™õ‡´Ä ‡™ï‡´á‡™ü‡™≤‡™æ ‡™¶‡™ø‡™µ‡™∏‡´ã‡™Æ‡™æ‡™Ç ‡™∞‡´Ç‡™™‡´Ä‡™Ø‡™æ ‡™Æ‡™≥‡´á ‡™õ‡´á",
        "84": "‡™ï‡´ã‡™à‡™™‡™£ ‡™∏‡™∞‡™ï‡™æ‡™∞‡´Ä ‡™Ø‡´ã‡™ú‡™®‡™æ ‡™Ö‡™•‡™µ‡™æ ‡™∏‡™¨‡™∏‡´Ä‡™°‡´Ä‡™®‡´ã ‡™≤‡™æ‡™≠ ‡™Æ‡™≥‡´á ‡™õ‡´á (‡™π‡™æ/‡™®‡™æ)",
        "85": "‡™™‡™æ‡™ï ‡™µ‡´Ä‡™Æ‡´ã ‡™â‡™§‡™æ‡™∞‡´ã ‡™õ‡´ã (‡™π‡™æ/‡™®‡™æ)", "86": "‡™¶‡™∞ ‡™è‡™ï‡™∞ ‡™™‡™æ‡™ï ‡™µ‡´Ä‡™Æ‡™æ‡™®‡´ã ‡™ñ‡™∞‡´ç‡™ö",
        "87": "‡™ï‡™ø‡™∂‡™æ‡™® ‡™ï‡´ç‡™∞‡´á‡™°‡™ø‡™ü ‡™ï‡™æ‡™∞‡´ç‡™° ‡™õ‡´á (‡™π‡™æ/‡™®‡™æ)", "88": "‡™∏‡™ï‡´ç‡™∞‡™ø‡™Ø ‡™¨‡´á‡™Ç‡™ï ‡™ñ‡™æ‡™§‡´Å‡™Ç ‡™õ‡´á (‡™π‡™æ/‡™®‡™æ)",
        "89": "‡™™‡™æ‡™ï ‡™´‡´á‡™∞‡™¨‡™¶‡™≤‡´Ä ‡™ï‡™∞‡´ã ‡™õ‡´ã (‡™π‡™æ/‡™®‡™æ)", "90": "‡™™‡™æ‡™ï ‡™´‡´á‡™∞‡™¨‡™¶‡™≤‡´Ä ‡™Æ‡™æ‡™ü‡´á ‡™µ‡™™‡™∞‡™æ‡™§‡™æ ‡™™‡™æ‡™ï",
        "91": "‡™ï‡´ã‡™à‡™™‡™£ ‡™™‡™æ‡™£‡´Ä ‡™ü‡´ç‡™∞‡´á‡™ï‡™ø‡™Ç‡™ó ‡™â‡™™‡™ï‡™∞‡™£‡´ã‡™®‡´ã ‡™â‡™™‡™Ø‡´ã‡™ó ‡™ï‡™∞‡´ã ‡™õ‡´ã (‡™π‡™æ/‡™®‡™æ)",
        "92": "‡™ï‡´Ç‡™µ‡™æ ‡™ï‡´á ‡™¨‡´ã‡™∞‡™µ‡´á‡™≤‡™®‡™æ ‡™™‡™Ç‡™™‡™®‡´Ä ‡™ï‡´ç‡™∑‡™Æ‡™§‡™æ (‡™è‡™ö‡™™‡´Ä‡™Æ‡™æ‡™Ç)",
        "93": "‡™¨‡™´‡™∞ ‡™ù‡´ã‡™® ‡™ú‡™æ‡™≥‡™µ‡´ã ‡™õ‡´ã (‡™π‡™æ/‡™®‡™æ)",
        "94": "‡™™‡™æ‡™ï‡™®‡™æ ‡™Ö‡™µ‡™∂‡´á‡™∑‡´ã‡™®‡´ã ‡™â‡™™‡™Ø‡´ã‡™ó (‡™¨‡™≥‡™§‡™£/‡™™‡™∂‡´Å‡™ì‡™®‡´ã ‡™ñ‡´ã‡™∞‡™æ‡™ï/‡™¨‡™æ‡™Ø‡´ã‡™ö‡™æ‡™∞/‡§á‡§®-‡§∏‡•Ä‡§ü‡•Ç ‡§ï‡§Ç‡§™‡•ã‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó/‡§∏‡™≥‡™ó‡™æ‡™µ‡™µ‡´Å‡™Ç/‡§ï‡™Ç‡™™‡•ã‡§∏‡•ç‡§ü)",
        "95": "‡™ï‡™æ‡™Æ‡™¶‡™æ‡™∞‡™®‡´á ‡™ö‡´Ç‡™ï‡™µ‡™£‡´Ä‡™®‡´Ä ‡™™‡™¶‡´ç‡™ß‡™§‡™ø (‡™∞‡´ã‡™ï‡™°‡™æ/‡™ì‡™®‡™≤‡™æ‡™á‡™®)",
        "96": "‡™™‡´Å‡™∞‡´Å‡™∑ ‡™Ö‡™®‡´á ‡™Æ‡™π‡™ø‡™≤‡™æ ‡™ï‡™æ‡™Æ‡™¶‡™æ‡™∞‡´ã ‡™Æ‡™æ‡™ü‡´á ‡™ï‡´ã‡™à‡™™‡™£ ‡™µ‡´á‡™§‡™® ‡™§‡™´‡™æ‡™µ‡™§ (‡™π‡™æ/‡™®‡™æ)",
        "97": "‡™ï‡´ã‡™à ‡™∂‡´ç‡™∞‡™Æ ‡™∞‡™ú‡´Ä‡™∏‡´ç‡™ü‡™∞‡™®‡´ã ‡™â‡™™‡™Ø‡´ã‡™ó ‡™ï‡™∞‡´Ä ‡™∞‡™π‡´ç‡™Ø‡™æ ‡™õ‡´ã (‡™π‡™æ/‡™®‡™æ)",
        "98": "‡™ï‡™æ‡™Æ‡™¶‡™æ‡™∞‡´ã ‡™Æ‡™æ‡™ü‡´á ‡™∏‡™≤‡™æ‡™Æ‡™§‡´Ä-‡™ï‡´Ä‡™ü/‡™™‡´ç‡™∞‡™æ‡™•‡™Æ‡™ø‡™ï ‡™∏‡™æ‡™∞‡™µ‡™æ‡™∞‡™®‡´Ä ‡™ï‡´ã‡™à‡™™‡™£ ‡™µ‡´ç‡™Ø‡™µ‡™∏‡´ç‡™•‡™æ",
        "99": "‡™ï‡™æ‡™Æ‡™¶‡™æ‡™∞‡´ã ‡™Æ‡™æ‡™ü‡´á ‡™Ü‡™∂‡´ç‡™∞‡™Ø ‡™Ö‡™®‡´á ‡™∏‡´Å‡™∞‡™ï‡´ç‡™∑‡™ø‡™§ ‡§™‡§ø‡§£‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§ï‡•ã‡§à ‡™ú‡´ã‡™ó‡™µ‡™æ‡™à",
        "100": "‡™ï‡™æ‡™Æ‡™¶‡™æ‡™∞‡´ã ‡™Æ‡™æ‡™ü‡´á ‡™∂‡´å‡™ö‡™æ‡™≤‡™Ø‡™®‡´Ä ‡™ï‡´ã‡™à ‡™ú‡´ã‡™ó‡™µ‡™æ‡™à",
        "101": "‡™ñ‡´á‡™§‡´Ä‡™ï‡™æ‡™Æ‡™Æ‡™æ‡™Ç ‡™ï‡´Å‡™ü‡´Å‡™Ç‡™¨‡™®‡™æ ‡™∏‡™≠‡´ç‡™Ø‡´ã (‡™Æ‡™π‡™ø‡™≤‡™æ‡™ì) ‡™®‡´á ‡™∏‡™æ‡™Æ‡´á‡™≤ ‡™ï‡™∞‡´ã ‡™õ‡´ã",
        "102": "‡™ï‡´ã‡™à‡™™‡™£ ‡™∏‡™æ‡™Æ‡´Å‡™¶‡™æ‡™Ø‡™ø‡™ï ‡™ú‡™≥ ‡™∏‡™Ç‡™ö‡™Ø ‡™Æ‡™æ‡™≥‡™ñ‡´Å‡™Ç (‡™π‡™æ/‡™®‡™æ)",
        "103": "‡™Æ‡™æ‡™ü‡´Ä ‡™≠‡´á‡™ú ‡™Æ‡´Ä‡™ü‡™∞‡™®‡´ã ‡™â‡™™‡™Ø‡´ã‡™ó (‡™π‡™æ/‡™®‡™æ)",
        "surveyor_name_key": "‡™∏‡™∞‡´ç‡™µ‡´á‡™Ø‡™∞‡™®‡´Å‡™Ç ‡™®‡™æ‡™Æ"
    },
}

# Define the form structure using a dictionary.
all_questions = [str(i) for i in range(1, 104)]
FORM_FIELDS = {
    "1": {"type": "text", "required": True}, "2": {"type": "text", "required": True},
    "3": {"type": "text", "required": True}, "4": {"type": "selectbox", "options": ["Male", "Female", "Others"]},
    "5": {"type": "text", "required": False}, "6": {"type": "text", "required": True},
    "7": {"type": "text", "required": False}, "8": {"type": "text", "required": True},
    "9": {"type": "text", "required": True}, "10": {"type": "text", "required": True},
    "11": {"type": "number", "required": False}, "12": {"type": "number", "required": False},
    "13": {"type": "number", "required": False}, "14": {"type": "number", "required": False},
    "15": {"type": "number", "required": False}, "16": {"type": "number", "required": False},
    "17": {"type": "number", "required": False}, "18": {"type": "text", "required": False},
    "19": {"type": "text", "required": False}, "20": {"type": "number", "required": False},
    "21": {"type": "number", "required": False}, "22": {"type": "number", "required": False},
    "23": {"type": "multiselect", "options": ["Certified", "Non-Certified", "IC1", "IC2", "Others"]},
    "24": {"type": "selectbox", "options": ["Canal", "Well", "Borewell", "River", "Farm Pond", "Community Pond", "Rain-fed not irrigated"]},
    "25": {"type": "number", "required": False}, "26": {"type": "number", "required": False},
    "27": {"type": "text", "required": False}, "28": {"type": "text", "required": False},
    "29": {"type": "yes_no"}, "30": {"type": "yes_no"},
    "31": {"type": "text", "required": False}, "32": {"type": "multiselect", "options": ["FPO", "FPC", "SHG", "Others"]},
    "33": {"type": "yes_no"}, "34": {"type": "number", "required": True},
    "35": {"type": "text", "required": True}, "36": {"type": "text", "required": False},
    "37": {"type": "number", "required": True}, "38": {"type": "number", "required": False},
    "39": {"type": "number", "required": True}, "40": {"type": "number", "required": False},
    "41": {"type": "number", "required": True}, "42": {"type": "number", "required": True},
    "43": {"type": "number", "required": False}, "44": {"type": "text", "required": False},
    "45": {"type": "text", "required": False}, "46": {"type": "number", "required": False},
    "47": {"type": "number", "required": False}, "48": {"type": "number", "required": False},
    "49": {"type": "number", "required": False}, "50": {"type": "number", "required": False},
    "51": {"type": "number", "required": False}, "52": {"type": "number", "required": False},
    "53": {"type": "number", "required": False}, "54": {"type": "number", "required": False},
    "55": {"type": "selectbox", "options": ["Drip irrigation", "Sprinkler irrigation", "Flood irrigation", "Ridge and Furrow Irrigation", "Other"]},
    "56": {"type": "yes_no"}, "57": {"type": "number", "required": False},
    "58": {"type": "number", "required": False}, "59": {"type": "number", "required": False},
    "60": {"type": "number", "required": False}, "61": {"type": "number", "required": False},
    "62": {"type": "text_with_placeholder", "placeholder": "e.g., month 1, month 2, month 3"},
    "63": {"type": "selectbox", "options": ["Manual", "Mechanical", "Both", "Other"]},
    "64": {"type": "number", "required": False}, "65": {"type": "number", "required": False},
    "66": {"type": "number", "required": False}, "67": {"type": "number", "required": False},
    "68": {"type": "number", "required": False}, "69": {"type": "number", "required": False},
    "70": {"type": "text", "required": False}, "71": {"type": "text", "required": False},
    "72": {"type": "text", "required": False}, "73": {"type": "text", "required": False},
    "74": {"type": "text", "required": False}, "75": {"type": "yes_no"},
    "76": {"type": "text", "required": False}, "77": {"type": "text", "required": False},
    "78": {"type": "yes_no"}, "79": {"type": "number", "required": False},
    "80": {"type": "number", "required": False}, "81": {"type": "text", "required": False},
    "82": {"type": "text", "required": False}, "83": {"type": "number", "required": False},
    "84": {"type": "yes_no"}, "85": {"type": "yes_no"}, "86": {"type": "number", "required": False},
    "87": {"type": "yes_no"}, "88": {"type": "yes_no"}, "89": {"type": "yes_no"},
    "90": {"type": "text", "required": False}, "91": {"type": "yes_no"},
    "92": {"type": "number", "required": False}, "93": {"type": "yes_no"},
    "94": {"type": "multiselect", "options": ["Fuel", "Cattle feed", "Biochar", "In-situ composting", "Burning"]},
    "95": {"type": "text", "required": False}, "96": {"type": "yes_no"},
    "97": {"type": "yes_no"}, "98": {"type": "yes_no"}, "99": {"type": "yes_no"},
    "100": {"type": "yes_no"}, "101": {"type": "yes_no"}, "102": {"type": "yes_no"},
    "103": {"type": "yes_no"},
}

# --- Main App Logic ---
# Sidebar for language selection
language = st.sidebar.selectbox(
    "Select Language / ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ / ‡™≠‡™æ‡™∑‡™æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã",
    ["English", "Hindi", "Marathi", "Gujarati"],
    key="language_select"
)
labels = dict_translations.get(language, dict_translations["English"])
surveyor_name_label = labels.get("surveyor_name_key", "Surveyor Name")

if not st.session_state.form_submitted_for_review:
    with st.form("questionnaire_form"):
        # Surveyor Name input
        st.session_state.responses["surveyor_name"] = st.text_input(
            surveyor_name_label,
            key="surveyor_name_input",
            value=st.session_state.responses.get("surveyor_name", "")
        )

        # Dynamically build the form based on FORM_FIELDS dictionary
        for q_key in all_questions:
            question_text = labels.get(q_key, f"Question {q_key} (No translation)")
            field_config = FORM_FIELDS.get(q_key, {"type": "text"})
            current_value = st.session_state.responses.get(q_key, "")

            if field_config["type"] == "text":
                st.session_state.responses[q_key] = st.text_input(
                    question_text,
                    key=f"question_{q_key}",
                    value=current_value
                )
            elif field_config["type"] == "number":
                num_val = float(current_value) if isinstance(current_value, (int, float)) or (isinstance(current_value, str) and current_value.replace('.', '', 1).isdigit()) else 0.0
                st.session_state.responses[q_key] = st.number_input(
                    question_text,
                    min_value=0.0,
                    format="%.2f",
                    key=f"question_{q_key}",
                    value=num_val
                )
            elif field_config["type"] == "yes_no":
                default_index = 0 if current_value == "Yes" else (1 if current_value == "No" else 0)
                st.session_state.responses[q_key] = st.selectbox(
                    question_text,
                    ["Yes", "No"],
                    key=f"question_{q_key}",
                    index=default_index
                )
            elif field_config["type"] == "selectbox":
                options = field_config["options"]
                default_index = options.index(current_value) if current_value in options else 0
                selected_option = st.selectbox(
                    question_text,
                    options,
                    key=f"question_{q_key}",
                    index=default_index
                )
                st.session_state.responses[q_key] = selected_option
                if q_key == "4" and selected_option == "Others":
                    st.session_state.responses["others_gender"] = st.text_input(
                        "If selected 'Others', please specify:",
                        key="others_gender_specify",
                        value=st.session_state.responses.get("others_gender", "")
                    )
                elif q_key == "4" and selected_option != "Others":
                    st.session_state.responses.pop("others_gender", None)

            elif field_config["type"] == "multiselect":
                options = field_config["options"]
                selected_values = current_value.split(', ') if isinstance(current_value, str) and current_value else []
                selected_options = st.multiselect(
                    question_text,
                    options,
                    default=selected_values,
                    key=f"question_{q_key}"
                )
                st.session_state.responses[q_key] = ", ".join(selected_options) if selected_options else ""
            
            elif field_config["type"] == "text_with_placeholder":
                st.session_state.responses[q_key] = st.text_input(
                    question_text,
                    placeholder=field_config["placeholder"],
                    key=f"question_{q_key}",
                    value=current_value
                )

        # Photo uploader
        uploaded_photo = st.file_uploader(
            "Upload a photo (optional):",
            type=["jpg", "jpeg", "png"],
            key="uploaded_photo_form",
        )
        if uploaded_photo:
            st.session_state.uploaded_photo_info = {
                "name": uploaded_photo.name,
                "data": uploaded_photo.getvalue(),
                "type": uploaded_photo.type
            }
        elif st.session_state.uploaded_photo_info:
            st.image(st.session_state.uploaded_photo_info["data"], caption="Previously uploaded photo", width=100)
            if st.button("Clear Photo", key="clear_photo_button"):
                st.session_state.uploaded_photo_info = None
                st.rerun()

        # Submit button
        if st.form_submit_button("Review and Proceed"):
            st.session_state.has_validation_error = False
            # Validation logic
            required_fields = [k for k, v in FORM_FIELDS.items() if v.get("required")]
            for field in required_fields:
                val = st.session_state.responses.get(field)
                if not val or (isinstance(val, (int, float)) and val <= 0 and field in ["34", "37", "39", "41", "42"]):
                    st.error(f"Field '{labels[field]}' is required.")
                    st.session_state.has_validation_error = True
            
            # Specific validation for mobile number
            phone_number = str(st.session_state.responses.get("3", "")).strip()
            if not phone_number.isdigit() or len(phone_number) != 10:
                st.error("Mobile no. must be exactly 10 digits.")
                st.session_state.has_validation_error = True

            # Specific validation for harvesting time
            harvesting_time = st.session_state.responses.get("62")
            if harvesting_time and len([m.strip() for m in harvesting_time.split(",") if m.strip()]) != 3:
                st.error(f"Field '{labels['62']}' must contain exactly 3 months, separated by commas.")
                st.session_state.has_validation_error = True

            if not st.session_state.has_validation_error:
                st.session_state.form_submitted_for_review = True
                st.rerun()

# --- Review and Edit Section ---
if st.session_state.form_submitted_for_review and not st.session_state.has_validation_error:
    st.subheader("Review Your Responses")
    st.write("Please review the information below. If everything is correct, click 'Confirm and Save'.")

    # Display responses for review
    st.write(f"**{surveyor_name_label}:** {st.session_state.responses.get('surveyor_name')}")
    for key, value in st.session_state.responses.items():
        if key in all_questions:
            st.write(f"**{labels.get(key, f'Question {key}')}:** {value}")
        elif key == "others_gender":
            st.write(f"**If selected 'Others', please specify:** {value}")
    
    if st.session_state.uploaded_photo_info:
        st.image(st.session_state.uploaded_photo_info["data"], caption="Uploaded Photo", width=200)

    col1, col2 = st.columns(2)
    with col1:
        if st.button("Edit Responses"):
            st.session_state.form_submitted_for_review = False
            st.rerun()
    with col2:
        if st.button("Confirm and Save"):
            try:
                # 1. Define all possible columns for consistent DataFrame structure
                all_possible_columns = (
                    ["Timestamp", "Surveyor Name"]
                    + [labels.get(q_key, f"Question {q_key}") for q_key in all_questions]
                    + ["Others Gender Specify"]
                )

                # 2. Prepare data for the new DataFrame row
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                current_response_data = {
                    "Timestamp": timestamp,
                    "Surveyor Name": st.session_state.responses.get("surveyor_name")
                }
                
                # Fill in responses using the translated labels as keys
                for q_key in all_questions:
                    question_label = labels.get(q_key, f"Question {q_key}")
                    current_response_data[question_label] = st.session_state.responses.get(q_key)

                if "others_gender" in st.session_state.responses:
                    current_response_data["Others Gender Specify"] = st.session_state.responses.get("others_gender")
                
                # 3. Create the new row as a DataFrame and align its columns
                new_row_df = pd.DataFrame([current_response_data], columns=all_possible_columns)
                
                # 4. Append the new row and save
                if st.session_state.all_survey_data.empty:
                    st.session_state.all_survey_data = new_row_df
                else:
                    st.session_state.all_survey_data = pd.concat([st.session_state.all_survey_data, new_row_df], ignore_index=True)
                
                st.session_state.all_survey_data.to_csv(SAVE_CSV_PATH, index=False, encoding='utf-8')
                
                # Save photo logic
                if st.session_state.uploaded_photo_info:
                    farmer_name_for_filename = "".join(filter(str.isalnum, st.session_state.responses.get("2", "unknown_farmer"))).lower()
                    photo_name = f"photo_{farmer_name_for_filename}_{timestamp}.jpg"
                    photo_path = os.path.join(PHOTOS_DIR, photo_name)
                    with open(photo_path, "wb") as f:
                        f.write(st.session_state.uploaded_photo_info["data"])
                    st.success(f"Survey data recorded and photo saved as {photo_name}!")
                else:
                    st.success("Survey data recorded successfully!")
                
                # Clear and reset state for a new survey
                st.session_state.responses = {}
                st.session_state.uploaded_photo_info = None
                st.session_state.form_submitted_for_review = False
                st.rerun()

            except Exception as e:
                st.error(f"An error occurred while saving: {e}")

# --- Admin Section ---
st.markdown("---")
st.subheader("Admin Login (for Data Access)")
if not st.session_state.admin_logged_in:
    with st.form("admin_login_form"):
        admin_email = st.text_input("Admin Email").lower()
        login_button = st.form_submit_button("Login")
        if login_button:
            if admin_email in ADMIN_USERS:
                st.session_state.admin_logged_in = True
                st.session_state.last_admin_email = admin_email
                st.success("Admin login successful!")
                st.rerun()
            else:
                st.error("Invalid email. Please use an authorized admin email.")
else:
    st.success(f"You are logged in as Admin ({st.session_state.get('last_admin_email', 'unknown')}).")
    if st.button("Logout"):
        st.session_state.admin_logged_in = False
        st.session_state.pop('last_admin_email', None)
        st.rerun()

# Display responses for admin
if st.session_state.admin_logged_in:
    st.markdown("---")
    st.subheader("View Submitted Responses")
    if not st.session_state.all_survey_data.empty:
        df = st.session_state.all_survey_data.copy()
        df["Timestamp"] = pd.to_datetime(df["Timestamp"], errors='coerce')
        st.write("Showing all survey responses:")
        st.dataframe(df)

        # Search functionality
        search_term = st.text_input("Search responses", key="search_admin_view")
        if search_term:
            filtered_df = df[
                df.apply(lambda row: row.astype(str).str.contains(search_term, case=False, na=False).any(), axis=1)
            ]
            if not filtered_df.empty:
                st.write("Filtered Results:")
                st.dataframe(filtered_df)
            else:
                st.info("No matching responses found.")
        
        st.markdown("---")
        st.subheader("Download All Data")

        # Download CSV
        csv_data = st.session_state.all_survey_data.to_csv(index=False, encoding='utf-8')
        st.download_button(
            label="Download All Responses (CSV)",
            data=csv_data,
            file_name="all_survey_responses.csv",
            mime="text/csv",
            key="download_csv"
        )
        
        # Download photos as a zip file
        def create_zip_file(folder_path):
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                for root, _, files in os.walk(folder_path):
                    for file in files:
                        zip_file.write(
                            os.path.join(root, file),
                            os.path.relpath(os.path.join(root, file), folder_path)
                        )
            zip_buffer.seek(0)
            return zip_buffer

        if os.listdir(PHOTOS_DIR):
            zip_buffer = create_zip_file(PHOTOS_DIR)
            st.download_button(
                label="Download All Photos (ZIP)",
                data=zip_buffer,
                file_name="all_photos.zip",
                mime="application/zip",
                key="download_photos_zip"
            )
        else:
            st.info("No photos available for download.")

    else:
        st.info("No submissions found.")
